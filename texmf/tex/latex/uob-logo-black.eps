ÅÐÓÆ %ADO_DSC_Encoding: MacOS Roman
%%Title: BU logo_Black.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Dani
%%CreationDate: 19/10/2011
%%BoundingBox: 0 0 740 215
%%HiResBoundingBox: 0 0 739.8589 214.0405
%%CropBox: 0 0 739.8589 214.0405
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.2 x399 R agm 4.5189 ct 5.1875%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 40 8%%BeginData: 8244 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C4527272752FF7D2752FF7D2752FF7D2720277DFFA8FD05FF527DFD08%FF7DFD5CFFF827F852FF7DF852FF7DF852FF7DF827F8A8A87DFD04FF2752%FD08FF527DFD5CFF27F8FD0F277DFF52FFFFFFA8277DFD07FF5252FD5DFF%F827F827F827F827F827F827F827F827F87EFF52A8FFFF84F852FD06FF27%27A8FD5DFF2720272752527D7D5320272727202727277DFF27A8FFFF7D27%27FD05FF2727A8FD5EFFF827F8272752527D52525227F827F827F884FF27%7DFF7D27F827A8FFFFA8F8277DFD5FFF272727F8272727A8FFFFA8F85227%27F8277DFFF87DA827F82752FFFF7E272752FD5BFF7DA8FFFFFFF827F827%527DA8FFFFFF27277D27F827F8A8FF272752F82727FFFF7DF82727FD0AFF%A8537D52A8FD04FF7D7D52A8FD09FF7D7DFD1BFF7D7DFD1BFFA85252F8A8%FFFF2727277DFFA8FD04FF52A8A8272720277DFFFD042720FFFF52202727%A8FD0BFF7D207EFD05FFA8277DFD0AFF7DA8FD1BFFA87DFD1BFF52FFFFA8%A8FFFFF82727FFA87DFD04FF527D5227F827F8A8FF27F827F827A852F827%F87DFD06FFA8FD05FF7D27A8FD06FF537DFD2BFFA8FD17FF527DFD06FF27%F827A8FF52FFA87EA8A82727F82727277DFF2727F8272727F8272752FD06%FF7DA8FD05FFA827FD07FF52A8FD2BFF7DA8FD16FF527DFD06FFF827527D%52272727F8277DA87D7DF827F87EFF27F827F827F827F827A8FF5227277D%5227A8FD05FF7D27A8FD06FF7D7DFF527DA87D277DFFFF7D527DFF537D7D%FFA87D52FFA87D7D527DFFA8527D7D52A8A87D527DFFA8527DFFA8F85252%A87D5353FFFF7D52A8FD04FFA87D52527DFFFF7DF85252FD05FF2720FF7D%277D52275220A8FFFF522727277DFF2727205227272027A8FF5227272720%277DFD06FFA827FD07FF52A8FF52277DA8A827A8FFA8277DFFA827A8FFFF%527DFF7D7DFF7D27FFA820525252847D7DFF52FFA8272EFFA8277DA8AFFF%2752FFFFA852A8FD04FF527DFFA82752FFA82752A8FD05FFF8272752F8A8%FFA87DA8FFFFA827F827F884FF27F8272752F827277D2727F827527D7DFD%07FF7D27A8FD06FF7D7DFF7D27FFFFFF277DFFFF7D52FFFF5252FFFF7DFF%A8277E7D7D27A8FF5327FFFFFF5252FFFFA8FF7D52FFFF27A8FFFFFF7EF8%FFFF7D7DFD04FF7D27FFFFFF7D27A8FF277DFD06FF272727F82752FFA8A8%A8FFA87E2727F8277DFFFD0427527D2727F82727277DFD0AFF84F8FD07FF%52A8FF7D27FFFFFF2784FFFF527DFFFF7D27FFA853FF7D52A8FFA8FFFFFF%527DFFFFFFA82027A8FFFF7D52FFA927A8FD04FF277DFF52FD05FF527DFD%04FF277EFF527DFD06FFF827F827F8275253527D2727F827F827F8A8FF27%F827F8277D27F827F82752FD0BFFA8277DFD05FFAF52A8FF7D27A8FFFF27%7DFFFF5252FFFFFF277D7DA8FF7D27FD06FF5252FD05FF2727A8FF5252FF%FF27A8FD04FF7D277D7DFD05FF5227FFFFFFA8277DFF277DFD06FF272727%20275252522727272027272720277DFFFD042720A85227207DA8FD0DFF28%27A8FD04FF7D52FFFFA827FFFFFF27A8FFFF527DFFFFFF7D277DFFFFA827%7DFFFFA8A8FF527DFFFFFFA8FFFF27A8FF7D52FFFF27A8FFA8FFFFFF2752%A8FD05FF7D27A8FFFFA827FFFF527DFD06FFF827F827F827F827F82752FD%047D52F8A8FF27277D7D7DA8A82727F85252A8A8FFA8FFA8FD06FFAF2727%527D525252FFFFFF52277DFF7D2752FFA82727A8FFFFA8277DFFFFFF5227%527D7DFFA82727A8A8FF527DA852A8A82727A8FF272752A8FFFFFF7D27FD%07FF52277DA8277EFFA8F852A8FD05FF7E5252272727527DA8FD08FFA8FF%A8FD07FFA87D52FD04277DA8FD09FF7D7D527D7DFFFFFFA8A87EA8A9FD05%A87EA8A8FFFFFF84FD05FF7D7D7DFFFFA87DA87EFFFFA87D84A8FFA8A87D%A8FFFF7DA8FD04FF7D7DFD08FF847D7DA8FFFFA8A87DA8FD09FFA8FD04FF%A852522752277D7EFFFFA853522752527D7DFD05FFA8FD46FF7DA8FD17FF%527DA8A8A87D7E522720272727202727277DFF272720272727202727527D%A8A8A87D7D52A8FD41FF7E52FD18FFF827F827F827F827F827F827F827F8%27F87EFF27F827F827F827F827F827F827F827F8277DFD40FF7DF8A8FD18%FF272727F827272752272727F8272727F8277DFFFD0427F8275227F82727%27F852A87DF8A8FD41FFA8FD19FFF827F827F852A8A827522727F827F827%F8A8FF27F827F8277DFF7D27F827F852A852F8277DFD05FF7EA87DA87D7D%7DA8A8FFFFFFA8A87DA87D7D7DA8A8FD07FFA8A8A8A9A8A8A8FFFFA87D7D%7DA8A8FFAFFD06A8AFFD07A8FD05FF7D7D527D7DFD05FFFD07A8FD05FF27%27272052FFFFA8A87D522027272720277DFFFD042752FFFFFF522727277D%FF522720A8FD04FFA87D272727A87DA8532752FFFFFF7D5227527DA87D52%52A8FD06FF7D5227527DFFFF7D277D7D7D2752FFFF20FD05522752525352%5220FD04FF7D527D7DA8595227A8FD04FF7D5227527DA8FD05FFF827F827%A8FFA8A8A8FFA852F827F827F8A8FF27F82727A87D7DFF7DF827F828A8FF%7D277DFD06FFA8F852FD04FF7D2727FFFFFF7D2752FFFFFFA828F8A8FD06%FF52277DFFFFA8F8A8FFFFFFA8F8A8A852A8FFFFFF522753FFA8FFA852A8%FFA82727FD06FF7DF852A8FFFFFF592752FD07FF27F82727FD05FFA8FFFF%7DF82727277DFF2727F8275252A8FF7D27F8272752FF7D27A8FD06FFA827%27FD05FF52277EFFFFA8F852FD04FFA82727FD06FF7DF8A8FFFF5227FD05%FFA87EA87DFD04FF7DF87DFD04FF7DA8FF2727FD08FF7DF852FFFFFFA827%7DFD07FFF827F852FD04FF7D53FFFFFF27F827F87EFF27F827F8277DFFFF%A82727F82727FF52277DFD06FFA8F852A8FD04FF52F87DFFFF7D2752FD05%FF2027A8FD05FF52277DFFFF52F87DFD06FFA8A8FD04FF7D2753FD04FFA8%A87DF8A8FD09FF28F87DFFFF7D277DFD07FF2720277DFD04FF7D277DFFFF%522727277DFF2727275252FD05FFA8FF7D52522727A8FD06FFA82727FD05%FF2727A8FFFFA82053FD05FF2720FD06FF7D20A8FFFF7D2727A8FD0BFF7D%207DFD06FF2052FD0AFF7D2727FFFFA8277DFD07FFF827F8A8FFFFFFA8F8%27F87DFF7DF827F884FF27F852537DFD08FF5227F8277DFD06FFAFF8277D%A884A82752A8FFFFFF842752FD04FFA8F852FD06FF52277DFFFFFF5227F8%7DFD0AFF7D2759FD05FF7D2752FD0AFFA8F827A8FF7D277DFD07FF272727%A8FF7D7D5227272752FF2727F8277DFF27277D527EFD08FF7D2727F8A8FD%06FFA827277D7D7D522728FD04FFA82752FD04FF2827A8FD06FF7D27A8FD%04FF53272752A8FD08FF7D277DFD05FF7D277DFD0BFF27F8A8FFA8F87DFD%07FFF827F87DFFA85227F827F8A852272727F8A8FF272752527D2752A8A8%7DA8FFFF2727F8277DFD06FFA8F852FD04FF7E27F8A8FFFF7D2727A87D7D%2728A8FD07FF52277DFD05FF7D27F8277DFD07FF53277DFD05FF522752FD%0BFF27277DFF7D2752FD07FF272727207D7D5227277DFF522727A820277D%FF272727527DFD0627FFA827272720A8FD06FFA82727FD05FF7D2752FFFF%A827527DA8522727A8FD07FF7D27A8FD07FF7D2027A8FD06FF7D277DFD05%FF7D2752FD0BFF2720FFFFA8207DFD07FFF827F827525327277DFFFF7D52%A8A827F8A8FF27F827F8525227F827F82752A85227F8277DFD06FFA8F852%FD05FFA8F827A8FF7D2752FFFFFF7D27F8A8FD06FF52277DFD08FF7DF852%FD06FF59277DFD05FF7D2720FD0AFFA8F852FFFF7D2759FD07FF27F82727%27F8272784A87DFFFF7D2727277DFF2727F8272727F82727527D527D7DF8%2727A8FD06FFA82727FD05FFA827F8FFFFA8F852FD04FF7D27F8A8FD05FF%7DF8A8FFFFA8FD06FF52F8FD06FF7DF87DFD06FF27277DFD09FF7D277DFF%FFA8277DFD06FFA8F827F827F827F8272752F8522727F827F87EFF27F827%F827F827F8275327F8A82727F8277DFD06FFA8F852FD05FFA8F852FFFF7E%2752FD05FF7D27F8A8FD04FF52277DFFFF52A8FD05FF5227A8FD05FF7D27%53FD06FFA8F827A8FD07FFA82727FFFFFF7D277DFD05FFA8532720272727%2027272720272727202727277DFF27272027272720272727207D52272027%27A8FD06FFA82727FD05FF27277DFFFFA82052FD06FF7D2727A8FFFFFF7D%20A8FFFF527DFD04FFAF2752FD06FF7D207DFD07FF7E2727A8FD06FF5227%FD04FFA8277DFD05FF7D7DF827F827F827F827F827277D7D7D5252F87DFF%272752597D5252F827F8272727F827F8277DFD04FFA87D52F827277D7D7D%27277DFFA8A82727F87D7DFD05FF7D27F8527D7EF82727A8FF7DF87DA8A8%7D2727FD05FF7DA8272727A87DFD06FFA8272752A8A8A87D5252FFFFFFA8%A8272727FD04522727FF7D525227272752527DA8FD06FFA8A8FFA8FD07FF%7D7D28FD04275252FD05FFA87D7DA87D7D7D7E7DA8A8FFFFFF7D847D7E7D%A8FD07FFA87D7D7DA87D7D7DFFA8A87D7D537D7DFD06FFA87D847D7D7DA8%FD08FF7D7D527D7D7DA8FD04FFA87D7D7D84FD057DA8FD05FFA8FD19FFA8%A8A8FD4BFFA8FD12FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="ï»¿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:CreateDate>2011-10-19T10:25:19+01:00</xmp:CreateDate>
         <xmp:ModifyDate>2011-10-19T10:25:19+01:00</xmp:ModifyDate>
         <xmp:MetadataDate>2011-10-19T10:25:19+01:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>76</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgATAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A4bomptpWtWGprGJWsLmG&#xA;5ERPEMYZA/GtDSvHFkzTz5+btx5u8+aP5tk0xLSTSEtkWzWUyLJ9WuHuAS5VacvU49MVp3n383Ln&#xA;zb590jzbLpiWcukJbILNZS4f6tcPcbuUUryMnHpitIf82vzSn/MTWLLUptOXTms7f6sIklMoYc2f&#xA;lUqlPtYqA9f/ACk146B/zj1c6zy4pZa9ayTE9PS+vWYlH0oSMUF9B61qQ03Rr7UuPqLZW0tzwB+0&#xA;IkL0r78cUPGv+cbNRbzauueb9euW1DzOt4beNpSWW1tXjV1W3Q7RK7M4PHqFxSXt888FvBJPcSLD&#xA;BEpeWWRgqKqipZmNAAB3xQ8y07zzd/mRr8+l+V3ktvJ+mPx1nXl5JJdv1FpaNsUVhvJIPi49ONQS&#xA;q9OiiihiSKJAkUahI0UUCqooAAOwGKrsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdir82reKaWeOKCMyzyMqxRKvNmcmiqFoeRJ7Ysn0D+U35c/mre6sbfWdPtdG0RUSWY3Wn&#xA;WXLmh/dvFbemFM1RtJKhoAevTFiVv53/AJR+VPKunQ3Vo2o635v8zXxjged4+JlkbnM6xQRxVZmY&#xA;BV6Vb2pil4h5l0C78v61c6NesrXtmVS6CGqpKUDPHXuUJ4kjao2xS9n0D/1kbzJ/20Y/+ou0xR1U&#xA;PzH/AD81248k6B5e0aRYF1DRohrl4BWVpCGglijJ+yp9JuR6/FSopuqAyz/nH7SYvy58kat5383X&#xA;I02x1dYDZwP/AHjRRB2Rgg+JnlMnwKN6b98VLEvMHn7zr+d/m2DynoCvpvl1n5SQ1/3QhHK4u2Xr&#xA;T9lBtWg3O+Kvp/yl5V0jyr5ftND0mL0rO0TiD+07nd5HPdnO5xQm+Ksb8y/mL5N8sTCLXtQ+oFqB&#xA;HkhnMbEioCyKjITQdAa4qmeg+YNJ16wGoaVM09mxokzRyRBvhDVUSqhZSGFGG2KoTzN528s+WI1l&#xA;128NlC4qJmimeMVNAGeNHVST0BOKojy75o0PzFZ/XdGuDdWm3Gf0pY0avQoZFTkPdcVTTFUHrOsa&#xA;boulXWq6nOLewsozLczEEhUXqaKCT8gMVVdPv7PULG3v7KUT2d1Gk1vMvR45AGVhXxBxVXxV2Kux&#xA;V2KuxV2KpZofmbQtdF4dJu1u/wBH3L2d5wDDhPFsy/EBX5jbFUzxV2KuxV2KuxV2Ksa8yeebbSLh&#xA;7Ky02+13VIkWSex0yIStCj/ZaZ3ZI05U+FS3I9hTFVbyT5ysfN2i/pWztbuyVJntprW+iMMySxUD&#xA;qVqQaE0qD126gjFXyD+QdlcW/nNfNktotxoXlhGudYnZlHoRyxSIkqqTV2QgvxAJ+E03pikvYH/5&#xA;yN8s6JrnmDUX0/UJ7PURaTaUJIDA0jJH6Mi1k2CcUEit3qdq4oppfzBufzXlVfKti2i+fPKbve2M&#xA;OohJoGjk/wBGnUkr8Mi8xTkmx+8KvB/zX8t+a9G81zy+apbVta1MteXMdpIr8TIerKo+Dl2GKQ9I&#xA;0D/1kbzJ/wBtGP8A6i7TFerwX4iO9Bt8sUst83edfN35h+YIBc8pXd1t9K0i2BEMIYhUjhj8TsOR&#xA;3OKvoLy5feQfyD8tW1przvd+bNWUT6jFYqks1BsqDm0arFHUgEsOR5EeAUJxJ/zlJ+XEmmtLp6Xt&#xA;zqrjjaaSYCsskrbInNS8Yqx7MfkcUU9Y0s3zaZaHUAovzDGbsJ9kTcB6nHrtyriryT/nK4D/AJVa&#xA;ntqVvT/gJMVD1vSwBploB09GP/iAxVjH5wIj/ld5pDgMBptwwB8VQkH6CMVQd9+ZPk/yV5a0CLWr&#xA;hoZbq0tltLaKJ3Lfu1XYgcFA/wAphiq/W/zm8laOY5bk3kulvKIH1qC1lk09JD2NyBwb5pyxVN/O&#xA;fnjyt5W0b9Ia7MfqM6kII4nuPUBG4oistCD1Yge+KpfqX5seUdL8sad5lv8A63Bo2pxRzW9yLaWR&#xA;UEoqiymIOEY+BOKprdecdMtfLx1+e3vV09V9R6WsxmWMKXMjQhTIECjc0xVDwfmH5am0Kz1tXuFt&#xA;dSkWHTInt5luLp3FVEEBX1H5DeoFKb1pviq3S/zD0O98yHyzcRXWma6YjcQWV9F6ZmiFavC6tJG9&#xA;KGoDV67bHFUpu/zy/Li11fUNLfUHNzpcLzXrCGQIpR0j9NSwUvIzyKFCA1xVGad+bPknUvLsOvWF&#xA;1LcWlzciwtoUgl+sS3ZHIQRxFQXahrUfCBuTQHFUw0/zxo91bapPNFdWDaMVGpQXcDrLHzXmpCp6&#xA;nqAr0KVriqXeVfzQ8neYdL1fU9F9d7HSZCLt1tpA8jleZMcKgyuT/qVriqSflv8AnRYeabKBrizv&#xA;o7u/u547UR2Vw8CQ+sywh7lEMNVjpzbl1rirILH80PK975ok8rQLe/pyEBp7R7O4QxxkqPVdmQKI&#xA;/jX4q03xVFat5+0LSvMNn5fu47z9JahX6kkVpPIkoUAuUkRSlIww57/D3xVkeKsRl/M7QXN42l2t&#xA;/rdvp7tHe3emWzTwxun21V6qJWXuIuRxVG6X+YHlPVvLknmLTL03umQ7TNbxSyzI9QODW6I03P4h&#xA;8PCvfpirzb8gvPdjqEWqx3UV22r63rV7dvcfVbhoKFVKI9xw9JOCR8QpIpsKb4q9qxV+cOn6vqum&#xA;mY6dez2RuI2hnNvK8RkifZkfgRyU9wdsWT238rPzDtIPy4uPK/mry+NZ02Ob1tNl1CaC1sgjblDP&#xA;csCpR6lfSVm+KlPFQU70n8/vy+8oz3Umm6PbXF5ekveHSbeSKNn6/FeXTpLL8RP/AB7qPD3UU8V/&#xA;MfzbD5v803vmIGdJr1wTbTcGWKNFCxojqRUKoA+z713xZB6loH/rI3mT/tox/wDUXaYo6vEtG1GO&#xA;xvkkuIRc2TkLeWjdJYj9pa/stT7LDdTuMUsi8xafrP5deeJU0i9eOSFVn0rUlCh3tbmPlFIKggMY&#xA;34tTvXFDJvI35N/mH56802975jtL+DS7h1n1LVr8PHJJDQN+7ab43ZxspAIHXoMVt9SeXfyi/Lby&#xA;7exX2k6DbwXsAAhuX5zSIQKclaVnKt/lDfFDL8VeTf8AOT+mXd9+VF1JbIZBY3VvdThRUiMExs1B&#xA;/L6gJ9sVDP8AyXr2na95V0vVtPlWW2ubaNgVNeLBQHRv8pGBU++Ksf8Azt1O3s/y31i1Y873V4v0&#xA;bp1qv95Nc3REaJGvc/FX5DFWKf8AOQVkbb8rNDspgHaDUdOhk2qCURkP34qyP8+44V/J3zEnFVjW&#xA;CEItAFFLiPiAPY0piqn5tWRfyBvllr6i+XQHrueQtRX8cVa8peWbPzP+Q+k6Bd7Q6hosEXOleD+m&#xA;GjkFe6OAw+WKsQ8leatR1/yHY/lzds0fmWO8k0DWVqRJHp9mOVxNXY/FbgQBv52xVM/PMUDfnj5N&#xA;0u7upNN0z9GXKaTJbyeiVvGLIyIeJUViVVHjWnzVZdefll5bk1zSde1LUL+41HSZlOnT3N19l3Yf&#xA;u+i8hIRTj36YqxG4srS4/wCco4XnhSVrfy8JoCwB4SCYoHHuFYjFWVfmh5DfzPptjFpOpronmHT7&#xA;v9I6RdLQBrhFPIOo3YEHcgEjwIqCql35T+etW1jV9b8v+aNLi0/zloohXUriAL6d1Ea+lIGG+wao&#xA;FafFUUqQFUt/IoAeYvzLA2A8y3f/ACdkxVX/AOcZnT/lUGl/ENp7oHfoTcPQfjipQ351Ws/ljX/L&#xA;/wCaNgnI6PKLHXo16y2FyeFT48Gcge7DwxVlXlW4g8x+btW80QuJtNsY10fRpV3VgOM17Mvs8pSP&#xA;/nniqP8AzMl1OL8vfMcmmcvryadcmEpXmD6RqUoCeQWvH3xVJ/yIuNNm/Kby7+j+IjjtzHOqkbTq&#xA;7ety8CZKt9OKsY/Le0Fh+fH5h2emVXRmjtZ7iNKCJbyVEkPTblyeXFUX/wA40/8AKB6h/wBtm9/4&#xA;0xV6zir5Q/5UP+VOufvvK35i2yI26Wt56LzU/wAoepbOPpjxTbf/AEL9+W2kD1fMv5jWaxjcwW/o&#xA;RyEf5PKaZm28I8Vtadc/5xa8rkpY6Te+arpNhcThjGSPEStbp9IiOKrB+bv5CXTNBe/lwsNqxoZb&#xA;YQerx8RxMJB+T/TitPS9OH5KP+SOryWhu4vIT3Sy30B9YzpMJ4CsKk8pKGRYxXkev2vBQ80b81v+&#xA;cf7AC20z8uvrVuhoJbz0jIR41ka4c/S2KaTLVPzF/wCcdPPklv8A4m0m+0W7toUtLa9jDcI4ErwQ&#xA;fV2kBC1/ai2xVNfLvkbQbVa/l5+cL2FtWqafcSwzCp3+KEyQAfP0sUMxtNa1Xy+gk80/mzplxEux&#xA;hS0so5mHXYq7MTTwjxV6pp91b3dhbXdvKZ7e4iSWGcjiXR1DKxFFpyBr0GKr7i3gubeW3uI1mt5k&#xA;aOaJwGR0YUZWU7EEGhGKvNR+QmhWF5Pc+V9d1nywlyxeaz02642xJ7+nIr7/AE7dsVTry7+VOg6T&#xA;qsWtX15f+YNbgBFtqOr3BuXh5CjeglFjjr7LX3xVX89/ltpHnZIIdXvr+O0t2WSO0tZlij9VOXGU&#xA;/AzFwHp9qntirXmr8ttO806FDomsarqUtgn9+qTRo1wQ4dDOVio3AqONAMVW6l+WlnqXloeW7zWt&#xA;VfS+JikQTQq8kPFFWJ3WEEovp/M1NScVTXyj5UtfK+kRaTZ3l1dWVuoS1S7dJDEi9ERlRDx+dcVQ&#xA;+leQfL2mecdW822sbjVtZijhuiSvpqsdKmMBQQZOKl6k1IGKteevy+8ueddMjsdajetvJ61neW7e&#xA;ncQSfzRPRqV7ggj7hiqH8s/lzp2izQXNzqep69eWo42lxq90bkwVHFjEgCRqxG3PjyptXFUG/wCU&#xA;2mHzTJ5pXWdWTXJIjbm6WaHaEmvpKjQlQo+WKp7r3lWLWF0tm1C8srvSZ/rNreWjxrKX9J4WEgkj&#xA;kjZWWQ8l47/LbFULp3kWzspdUvV1C8l1rV/TF5rLtCLkJD/dxxBYlhRFGwAj+dTviqC8m/ldo/lH&#xA;ULu90vUdRkbUJGnv4bmdJY5pm5VkcGMNyqxNQRXviqD8v/kv5W0HWHvrC61AWBufr0OgvcV06K6H&#xA;2ZVhCgkpsV5MaEA9hRVMvzQ1HR7byXqdpqKJcvqUDWVlpzMA9zc3H7qGJB1qZHXcfZ69sVTLyX5Z&#xA;tvK/lTS9AtqGPT7dImcdHk+1K/8As5CzfTiqdEAih3BxVhNl+VOl6Rd3c3lnVdR8uW9+3qXen2DW&#xA;zWpcihdIrqC5ETHxjp+rFU00jyLo+i6NdaZpEtxYyXspuLzU0kEl7LOzBnlkmmWTkzUoajp0piqA&#xA;8mflhpfk9fR0fVNSFkZmuJbKeaOWKSR14szVi570B2Yb4qzHFX5rYsntf5e/8453Wr+Wm8z+Z79d&#xA;H0+aEy6dbsQjyFh+6eaRgRHG7U2ALEeG2KCXn3mj8udc8t2SXl/NatHJx4rG7hyWJACrIkZfZa1W&#xA;op9ONLbFcUve9A/9ZG8yf9tGP/qLtMUdXhum6dealqFtp9lE013dyLDBEoJLO5oBQVOKXs/nP/nH&#xA;ODRPJE+s2GqPeaxYxxXN/YuqxIsEqc9vW9GQOvFqKVLN04g7Yot5F5a0ldY1/T9KaQQi+njgEhIG&#xA;8jcQKtQAk7CuKWcfmj5T0byrFZaLaaFMLk6da30mvySTl5ZJqeoGiJ9FI1NUAC8gepxQH2J5J/5Q&#xA;zQP+2daf8mExQo+a/Odt5bhknudM1G8t4ovWmnsbf10RATXkeS04han2xVjXlv8AO/RPNEE83lrQ&#xA;9Y1ZLVlS59CK1QoXBK19e5i68T0xVFaj+cnlbRryC18yWuo+XjcnjBPqFqRAzfyiaAzx/PfbFWVX&#xA;+t29tpseo28M2pW8vFovqCC4Zkccg68T8S07jFWB6Z+f3ljVdal0LS9H1i71qHn6unC3hhmX0jST&#xA;kLieEAr3BNcVTTUfze0LRfSbzLpeq6BBMwQXd7ah4Ax6K01q9ygP04qzDTdT0/U7GG/065ivLKde&#xA;UNxC4eNh4hlqMVU9Y1VdLsXvGtbm8VCAYbOJp5jXuI13P0YqwLR/+cgfImtan+i9Kg1O91H4q2sN&#xA;lIzqE2YsP2QvcnFWTebPzB8teVbO1n1eWRLi+IWx02KNpbudzT4I4VqSQWAPavfFUouPzVfT7Z77&#xA;WfKeu6ZpaDm99JBBMsaUqXmjt55pUA7/AAmnfFURc/mz5Uj/AC9k8+QNNdaFG4QlE4zGtyLUkI5X&#xA;ozV37YqgU/O3y1Iiumk666OAysulXRBB3BBC4qgrX/nIbyFd301haW+q3F9b8vrFpFYTPLHwYI/O&#xA;NQWXixoajY4q7Wf+cgfKWk2DXl1pWtxxKyryl0+WBasaCrzcEH318MVZdq/k3yld+YrLzbqdpG2q&#xA;6REyW17K5VYo92qwJCfByYgsNq1xVK4/zW0S/lkTy3p+o+ZVhYpJc6ZAptQ46qLm4e3gc/6jnFUB&#xA;f/nRpmilD5q0DWfL1u7Bfr1zbJNagsdgZrWSff2pirNtG1vSNa0+PUNIvIb6yl+xcQOHQkdRUdCO&#xA;4O4xViXm784/K/lGb09ftdSs42keKG5No5glZCa+nIDxNQKj2xVMvLH5g6b5kitbjTdO1L6jeVMF&#xA;9NatFAVofi5MfsmmxpirKMVfnX5W8v3fmLzHpuh2hCz6jcR26yHcIHajORtsi1Y4sn6GrHBa2aKw&#xA;VYrWMU6KqiNaVHI0UAe+LF5d5Z/OHyV5x13V/K2s3NhJFczLbaVp7Bp47mPgOfKZk9B2aQ0Cq3+r&#xA;y+0VXzZ+eHkWw8l/mDd6XpxI02eNLyziJJMcc1ax1O5CurBa70pXfFkGe6B/6yN5k/7aMf8A1F2m&#xA;KOryryVF54s7s6/5XtblpbI+i17BGWWJphwoXpRa8ute++xxUvs/Sfy+Fr5EuNGluJJdb1K1H6U1&#xA;S4f6xLLdlN3ZphMOAbYLQgL0GKHzNe/84w/mzZRyzw29rdNAOaC2uRzbjv8Auw4j3+7FNq/5mfmj&#xA;Lq/5W+WfLd5qElz5ogd314pzUKkZkjiiuGPHnKUZS43owNd8VD6s8k/8oZoH/bOtP+TCYoTHVADp&#xA;l2D09GT/AIgcVfP/APzh1/xyfM//ABntf+ISYpLP/wDnImXRU/KbWV1QpycRiwVqczc+opj9PvUb&#xA;1p+zXFCl/wA43WutW35T6YuqB1DyTSWKSV5C1d6psd6E8mX2IxV535IH/WV/mD5Xf/JtMVfQfmHS&#xA;tO1bQr/TdSVXsbuCSK4DioCMpq3zXqPA4q8A/wCcPNT1OS28yaa7u+m27W00CGpSOaX1Ffj2HNUW&#xA;vyxSX0fih82f849Af8rr89mm4N4AfnfjFJXfnVrF55S/Pfyz5t1W3e60CC3RYOI5BaeokwQHb1E9&#xA;USD6MVfQOia7ouv6XFqWk3UV9p9wvwTREMp23Vh2Yd1O4xQxw/lfo0OiLodiRDpJ1iPV3s2UGMBJ&#xA;luGt0A48YzIm3gNumKszxV81/kl/60j5+/7e3/dUixSX0B5p0C28w+W9T0O5oItRtpLcsRy4l1IV&#xA;6bbo1GHyxQ8K/MDV9U89fmdpH5T2t00eiaeIz5imgJT6w0UQllB3J4qo4KP5zvWgxV9A6dp1hpth&#xA;BYWECWtlaoIre3iAVERRQAAYqvurW1u7aW1uokntplKTQyKHR1YUKspqCDir5e1Se6/I384YksJX&#xA;/wAGa5wnmsmJKJBI5SQCp+3bsKoevGgJ3OKXoH/OVyxv+VsT0DcdSt2RtjQmOUVB+RxQHoP5YgD8&#xA;tvKgAoP0PYHb3tYzirJcVfnn5F8yL5Z84aRrzxGePTrlJpYV2ZkBo4Wu3LiTT3xZF75+cf5lXlzb&#xA;z2+mTX8Frqul3Uz6fdgW/wDo8sVvGjLGKtxPxurNuaOo2YYWLzryJ+UXmO2gsPPWvxSad5aspre7&#xA;QIDJfXVZkEEdtAlW5TSMqqWp15dMCSUH5/fzJ5+TXfzHuoWs7GyuLeyS0lUqFhk5JGsMhp6jIy/v&#xA;RQULV6dFQzPQP/WRvMn/AG0Y/wDqLtMV6sN/LvzBoxv9H0w2iST22n6gII7iSSG3m1a4kZ0MrQuj&#xA;uktvFFb8SQOVK7YqXp2kf85a3tjdX1p5s8vOl1DOUWO0bg0PBRHJE8c3xchIrGpbvSm2K0z78tPz&#xA;/wBC883uoWEVhJp9/ax+tY2skqvJdqFJdY9kAdeP2anbfsaKHx75n1KbVPMmranPB9Vmvry4uZbW&#xA;hHpNNKztHQ7/AAlqYsn355J/5QzQP+2daf8AJhMWKY6n/wAc27/4wyf8ROKvmb/nFnylouvab5gf&#xA;UfrXKCa3WP6te3lmKMkhPIWssIbp+1XFJZz+aH5D2Fxpz+YPLVzdx6/pCNcWdvezyajDL6Y5FON6&#xA;05DHj8O9K9R3ChOPyE/Ni58/eX7qPU0jj1vSWjjuzEOKSxyA+nKF/ZJKMGA2qK7VoFXmXl251C3/&#xA;AOcpfMMlhZ/Xrj/SR9X9VYdjGlTyYEbYV6Mj/PT8zvzA0fTF0q40F9F0bVQYLvXIZlvJBE54yRxq&#xA;vopHKU6cm37eICh6F+TWheRtK8kWh8nTfW9OvP30185BmlmoFb1aAcWWnHhT4cVZzir5t/5x6/8A&#xA;J1efPnd/9R4xSXvXmvyj5f8ANejS6Rrtot1Zy7gHZ43HSSNxurDxHy6YofOHmD8u/wAy/wAl72bz&#xA;J5N1CTUPLasGvImHIrGP+WuAfCyjp6qdOvw4pe6flV+Zem/mB5ZGq20f1a9gf0dRsieXpS0r8JoO&#xA;SON1P0dQcUMzxV81/kl/60j5+/7e3/dUixSX0pih8u/lfdC1/wCco/MkN5UTXdzq0VtzO/8AfGZK&#xA;V/4qj29sUvqLFDsVfNX/ADmIqy3XlCGJed0wvhwUVchjbBB99aYpDJv+cl7eW2/JiwtpjWaC6so5&#xA;Cd6skLqfHuMUB6V+WX/ktvKf/bG0/wD6hY8VZLir81sWSoZ5jWsjGqhDUndVpRfkOI2xV6jo35//&#xA;AJkpPpENqqXkmm2T6fHbcHkE6kqY5niBKmaL014uB236mqikr/MXzP8Amz5phgn812d9FaWi1Cm2&#xA;nt7YkV/eNGQIufxU5AA0xVnWgf8ArI3mT/tox/8AUXaYr1eL2HljzJqEXq2Gk3l3F/vyC3llX70U&#xA;jFKG1C31GG9YapHPFdOec31hWEp5HdiHoTX3xVn3lnzrpFpq8d5GY9J8u+XJl1Gw0mAEXmo3ULEW&#xA;v1iX4y7VNZSWCKvLgorQqGA6nqN1qepXepXbc7u9mkuLhwKVklYu5p7s2KX6C+Sf+UM0D/tnWn/J&#xA;hMWKr5j1jSdO0i/mv7yG1jit5GkaWRUoOB8Tir5z/wCcTPNvl3Szr2lanfw2N3ePbzWguHWJZQgd&#xA;XVGYgFhyHw9fuOKS9g/Mv83vJnlny5fEanb3mrTQvHY6dbyLLK8rqQnIIW4JU1LN9FTtihh//OMX&#xA;kPUPKvlu/wBd12P6jca20ItoJzwdbeEMVZlanEyNITQ70AxSWH+Sde0X/oaXWbz69CLO5e7ht7ku&#xA;ojeTgo4q/wBk1KGnj2xV9Jappej6/pE+nahDHfabeIY5omoyMvsR3BGxG4OKHzhcad5y/ILzU+oa&#xA;ek2r/l7qMg+sR9eFdgH7JMg+y+yuNj/kqXvnlr8wvJ3mTSk1PStVt5Ldl5So8ipLEaVKyoxqhHv+&#xA;rFDwH/nHzXNHX85vOErXkKxagLt7GRnCrMDeBxwY7GqnkB4YpL128/M+x0P805vKuv3kdtYalY21&#xA;5olxKUSJXLSRyxNJQf3jR1Useu3cYoZjr+uaDpGjXGo6zdQ2+mJGTNJMV4MpH2QD9st0Cjrirxz/&#xA;AJxX8uXtlpvmLX2tns9K1y5i/RMEgo3oW5lIcbn4T6wUH/JOKS9wnu7W3ANxMkINSDIwWtOvUjFD&#xA;5i/JLXNHH/ORHnG7N7CLbUf0oLCYuoSbnqEcyemx2blGhYe2KS+oI5Y5UEkTq6HoykEGm3UYoeB/&#xA;nj+V3mW080235meSIjLqlm0c2oWca8nLwABZkjH94GQcZEG56+OKXov5cfm95V87WMQguEstbUcb&#xA;zRp2CzxyLswQNxMi16Mv00O2KGV61r2jaHYSahrF7DYWcQq807hF+Qr1PgBucVeOaN5W1P8AM38z&#xA;YfPus2ktn5R0Xinly0uFKSXRicus7RtQqhc89xv8K7gHFV//ADldqmnj8uILP6xGbqXUoQkCsC/7&#xA;uOQueI3AXvioZP8Alz+Y35fW/wCX3lm2ufM2lW9zb6VZQzwTXtvHIkkduiOjo7qwIZSNxiqI1z80&#xA;NJv7+w8teS9TtdU1/VZOP1i0kjuYbO2T4p7mVkLx8lQHghO7U7YqwLzR/wBCkeo/179H+rvT9F/W&#xA;uNaHp9R/d/wxSlGh/wDQn31heNPW5fB9e/SXD6eX7qn+tir3HyZ/gD6gP8Hfo36nTf8ARno0/wBn&#xA;6W9a9eW+KGRYqky/4O/Rlzx/R36M+sL9cp6HofWeScfV/Y9Tnwpy3rx9sVTiPhwX06enQcOPSnal&#xA;O2KpN5q/wd+jj/iv9H/o7f8A46fo+l709bbFXhfmH/oUH129X0/rFd/0d+kOFKnp6X7n7t8Uovy5&#xA;/wBCic1+q/VPW2r+kvr1K+/1r9186bYq99sfqX1K3+o+n9S9NPqvocfS9LiOHp8fh48acabUxQxP&#xA;zT/ypv8ASzf4r/w7+l+C8v0r9R+s+n+xX1/j4+GKpP8A9Y3f9+d/3K8Upt5d/wCVM/XF/wAOf4c+&#xA;uchx/R31H1eXano/FXFCd+a/8Hfosf4t/R36K9Rafpb0Pq/q0PH/AHo+DlStO+KsO/6xu/787/uV&#xA;4pZx5b/w3+hbf/DX1P8AQnx/VP0b6X1X+8b1PT9H93/ecuVP2q98UI+b0fRf1uPo8T6nOnHjTflX&#xA;alMVYDqH/Qv/ANZb9I/4T+tft/WP0b6n0898VQ3/AFjd/wB+d/3K8Usj17/lWfpr+nv0N6f1VfT+&#xA;vfVafU6nhx9X/dVa8afDihhdl/0LT9etfR/Qnr8j9T9bj6VeX+6/V/dfa6UxV6zF6fpp6XH0uI9P&#xA;jTjxptSm1KYqxzzl/wAq2/0P/Gv6G/3Z9Q/TP1X/ACPV9H6z/sOXH2r2xVjX/WN3/fnf9yvFLOPL&#xA;f+G/0Lb/AOGvqf6E+P6p+jfS+q/3jep6fo/u/wC85cqftV74oTLFXn3nv/lR31w/4x/Qv6Q/a+se&#xA;l9a7fa4/vfvxVQ0D/lRH6Wi/Rv6J/Sv/AB7fWOPrdf8AdP1n4q/6mFXpGBXn2p/8qA/SV3+lP8Kf&#xA;pP1pPr31r9G+v6/M+r6vP4+fOvLlvXriqG/6xu/787/uV4pTzyj/AMqk/SMn+D/0B+kvSPrfoj6l&#xA;6/o8lry+r/Hw5ca12rTFD//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xmpMM:DocumentID>xmp.did:F77F1174072068118083897A7A0F35FA</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:F77F1174072068118083897A7A0F35FA</xmpMM:InstanceID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F1174072068118083897A7A0F35FA</stEvt:instanceID>
                  <stEvt:when>2011-10-19T10:25:19+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:OriginalDocumentID>uuid:68D6EC2D5C5A11DCBAD0D54560AA94AB</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:68D6EC2F5C5A11DCBAD0D54560AA94AB</stRef:instanceID>
            <stRef:documentID>uuid:68D6EC2D5C5A11DCBAD0D54560AA94AB</stRef:documentID>
            <stRef:originalDocumentID>uuid:68D6EC2D5C5A11DCBAD0D54560AA94AB</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>296.999959</stDim:w>
            <stDim:h>209.999929</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>0.000000</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>0.000000</xmpG:cyan>
                           <xmpG:magenta>0.000000</xmpG:magenta>
                           <xmpG:yellow>0.000000</xmpG:yellow>
                           <xmpG:black>100.000000</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -214.041 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 214.041 li
739.859 214.041 li
739.859 0 li
cp
clp
[1 0 0 1 0 0 ]ct
264.625 167.066 mo
278.257 167.066 li
293.028 167.066 300.477 177.043 300.477 186.763 cv
300.477 196.606 295.679 206.957 279.016 206.957 cv
268.41 206.957 264.625 203.546 264.625 193.956 cv
264.625 167.066 li
cp
254.151 197.614 mo
254.151 205.573 252.129 207.968 241.782 207.968 cv
238.873 207.968 li
238.873 210.366 li
285.074 210.366 li
305.401 210.366 312.34 196.354 312.34 186.381 cv
312.34 176.538 305.401 168.834 293.538 165.3 cv
293.538 165.047 li
301.995 163.531 307.924 156.844 307.924 149.651 cv
307.924 143.588 305.401 139.293 300.224 135.639 cv
295.679 132.354 285.959 130.711 274.853 130.711 cv
272.451 130.711 262.86 130.835 255.913 131.093 cv
252.256 131.219 243.543 131.725 240.009 131.845 cv
240.009 134.247 li
244.428 134.247 li
253.263 134.247 254.151 138.033 254.151 145.226 cv
254.151 197.614 li
cp
264.625 133.489 mo
267.781 133.362 272.96 133.109 275.734 133.109 cv
291.261 133.109 296.562 141.189 296.562 150.027 cv
296.562 159.874 290.502 164.668 278.386 164.668 cv
264.625 164.668 li
264.625 133.489 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
f
346.934 175.02 mo
344.026 175.02 342.132 175.145 339.104 174.769 cv
339.104 133.362 li
341.375 133.109 343.017 133.109 345.417 133.109 cv
364.869 133.109 370.163 142.203 370.163 153.938 cv
370.163 169.086 360.956 175.02 346.934 175.02 cv
cp
440.21 134.247 mo
440.21 131.845 li
409.534 131.845 li
409.534 134.247 li
416.602 134.623 419.004 136.515 419.004 143.334 cv
419.004 197.111 li
419.004 205.314 417.443 207.452 410.216 207.923 cv
400.588 207.417 396.5 203.64 389.592 196.737 cv
379.629 186.763 li
373.703 180.83 369.915 177.291 365.244 173.632 cv
375.595 170.605 382.026 162.649 382.026 153.183 cv
382.026 140.307 371.552 130.711 348.195 130.711 cv
339.985 130.711 337.46 130.835 332.286 131.093 cv
327.112 131.342 319.409 131.845 316.381 131.845 cv
316.381 134.247 li
319.159 134.247 li
326.48 134.247 328.626 136.515 328.626 144.347 cv
328.626 197.491 li
328.626 205.952 325.973 207.968 318.528 207.968 cv
316.381 207.968 li
316.381 210.366 li
352.112 210.366 li
352.112 207.968 li
349.205 207.968 li
342.132 207.968 339.104 206.073 339.104 198.499 cv
339.104 177.165 li
341.125 177.291 342.765 177.422 345.543 177.422 cv
348.956 177.422 350.975 177.291 354.134 177.165 cv
357.166 179.186 361.587 182.844 367.139 188.4 cv
375.467 196.737 li
386.381 207.658 391.037 211.11 411.593 210.366 cv
440.21 210.366 li
440.21 207.968 li
431.5 207.968 429.482 205.444 429.482 197.996 cv
429.482 144.473 li
429.482 136.015 432.26 134.247 440.21 134.247 cv
cp
f
448.793 191.178 mo
451.448 202.415 460.279 208.976 470.127 208.976 cv
478.586 208.976 487.543 204.056 487.543 194.084 cv
487.543 175.903 447.026 170.35 447.026 148.261 cv
447.026 137.779 456.62 129.954 469.498 129.954 cv
480.095 129.954 482.246 133.109 486.665 133.109 cv
487.671 133.109 488.176 132.857 488.936 131.845 cv
490.955 131.845 li
493.099 147.879 li
490.955 147.879 li
487.419 138.792 479.342 132.986 470.629 132.986 cv
462.296 132.986 456.49 137.779 456.49 144.85 cv
456.49 162.776 497.013 167.576 497.013 190.797 cv
497.013 203.169 486.028 212.386 471.262 212.386 cv
464.316 212.386 455.487 208.976 453.718 208.976 cv
452.581 208.976 451.694 209.605 451.192 210.366 cv
449.045 210.366 li
446.398 191.178 li
448.793 191.178 li
cp
f
545.617 198.753 mo
545.617 205.573 547.883 207.968 555.583 207.968 cv
560.26 207.968 li
560.26 210.366 li
520.492 210.366 li
520.492 207.968 li
525.167 207.968 li
532.866 207.968 535.135 205.573 535.135 198.753 cv
535.135 136.396 li
513.168 136.396 li
508.123 136.396 505.849 139.293 503.952 150.403 cv
501.684 150.403 li
503.704 129.954 li
506.1 129.954 li
506.23 130.711 506.735 131.219 507.49 131.469 cv
508.249 131.725 509.133 131.845 510.014 131.845 cv
570.733 131.845 li
572.502 131.845 574.395 131.469 574.651 129.954 cv
577.045 129.954 li
579.068 150.403 li
576.792 150.403 li
574.902 139.293 572.629 136.396 567.583 136.396 cv
545.617 136.396 li
545.617 198.753 li
cp
f
671.493 168.961 mo
671.493 146.24 651.042 129.954 627.186 129.954 cv
600.3 129.954 580.981 147.752 580.981 172.872 cv
580.981 196.483 601.814 212.386 626.557 212.386 cv
651.042 212.386 671.493 194.461 671.493 168.961 cv
cp
659.625 173.125 mo
659.625 191.049 649.782 209.225 629.207 209.225 cv
608.879 209.225 592.852 192.569 592.852 168.961 cv
592.852 153.811 601.682 133.109 623.903 133.109 cv
644.733 133.109 659.625 149.651 659.625 173.125 cv
cp
f
730.144 210.366 mo
673.717 210.366 li
673.717 207.968 li
677.881 207.968 li
683.687 207.968 685.832 206.073 685.832 199.635 cv
685.832 143.71 li
685.832 137.023 683.814 134.247 675.863 134.247 cv
674.095 134.247 li
674.095 131.845 li
711.333 131.845 li
711.333 134.247 li
706.659 134.247 li
698.459 134.247 696.307 135.13 696.307 142.958 cv
696.307 201.149 li
696.307 204.559 697.702 205.823 701.358 205.823 cv
719.915 205.823 li
727.362 205.823 729.63 202.917 737.588 191.937 cv
739.859 191.937 li
730.144 210.366 li
cp
f
140.448 95.7607 mo
140.356 88.4131 137.862 73.395 120.284 64.8721 cv
138.134 70.5435 146.719 85.624 147.597 96.8765 cv
166.336 100.612 182.966 109.431 209.968 100.118 cv
210.062 100.059 li
210.062 100.059 174.529 100.382 159.67 89.6328 cv
167.345 89.9224 176.178 88.1851 179.073 83.8408 cv
182.159 79.2124 182.478 74.4321 190.079 74.1875 cv
194.35 74.0493 208.832 75.1304 210.351 53.8662 cv
205.717 61.686 200.698 64.9199 193.119 62.9893 cv
188.281 61.7568 179.449 58.0547 173.137 65.5957 cv
167.924 71.8218 162.326 75.0562 153.396 74.0908 cv
156.968 69.2642 210.207 .14502 210.207 .14502 cv
210.207 .14502 142.004 54.8809 138.24 58.0659 cv
137.516 48.0747 140.508 44.4063 144.514 40.0142 cv
147.792 36.4204 153.491 31.5542 148.954 21.2856 cv
145.287 12.9839 145.769 7.96387 155.761 0 cv
147.796 .57959 135.643 5.93604 137.081 20.562 cv
137.95 29.395 131.691 30.1592 129.406 31.4219 cv
123.469 34.7041 122.696 44.2617 122.504 51.6943 cv
121.828 49.2813 113.19 12.1372 110.149 .118652 cv
110.147 .125 110.148 100.059 110.148 100.059 cv
110.377 100.059 li
121.952 95.501 131.581 94.8032 140.448 95.7607 cv
cp
f
310.09 41.8145 mo
310.09 43.5928 li
303.819 43.686 301.574 46.2134 301.574 52.2051 cv
301.574 77.4785 li
301.574 89.0859 294.177 101.534 273.865 101.534 cv
255.986 101.534 246.813 91.3311 246.813 77.9463 cv
246.813 50.6133 li
246.813 44.6226 245.128 43.686 238.764 43.5928 cv
238.764 41.8145 li
262.82 41.8145 li
262.82 43.5928 li
261.977 43.5928 li
256.83 43.5928 254.583 44.9976 254.583 50.4268 cv
254.583 76.4482 li
254.583 89.0859 261.977 96.668 275.924 96.668 cv
286.502 96.668 297.267 92.2676 297.267 76.3545 cv
297.267 54.5449 li
297.267 45.5586 295.863 43.9678 288.093 43.5928 cv
288.093 41.8145 li
310.09 41.8145 li
cp
f
322.392 91.8936 mo
322.392 97.041 323.608 98.2588 328.663 98.2588 cv
328.663 100.037 li
309.849 100.037 li
309.849 98.2588 li
313.967 98.2588 316.12 96.0117 316.12 92.3613 cv
316.12 72.7046 li
316.12 69.2412 315.745 68.5854 313.311 68.1172 cv
310.129 67.4629 li
310.129 65.9648 li
320.894 62.0332 li
322.392 62.0332 li
322.392 69.3345 li
328.663 65.4028 333.905 61.939 338.492 61.939 cv
344.858 61.939 348.506 66.6196 348.506 75.9805 cv
348.506 88.4307 347.852 90.8643 347.759 94.5146 cv
347.666 97.041 349.164 98.2588 353 98.2588 cv
355.06 98.2588 li
355.06 100.037 li
334.935 100.037 li
334.935 98.2588 li
337.649 98.165 339.24 97.5098 340.27 96.4805 cv
342.048 94.7012 342.236 87.8682 342.236 75.418 cv
342.236 67.9297 338.585 65.5898 334.841 65.5898 cv
331.845 65.5898 327.259 68.2114 322.392 71.5815 cv
322.392 91.8936 li
cp
f
369.125 40.4102 mo
371.372 40.4102 373.243 42.001 373.243 43.9678 cv
373.243 45.9326 371.372 47.5244 369.125 47.5244 cv
366.878 47.5244 365.099 45.9326 365.099 43.9678 cv
365.099 42.001 366.878 40.4102 369.125 40.4102 cv
cp
372.963 92.9229 mo
372.963 96.1992 374.743 98.2588 379.702 98.2588 cv
379.702 100.037 li
358.921 100.037 li
358.921 98.2588 li
364.632 98.2588 366.691 96.3867 366.691 91.4258 cv
366.691 72.6113 li
366.691 68.9604 366.223 68.4922 363.79 68.0239 cv
359.39 67.1812 li
359.39 65.6841 li
371.558 61.4717 li
372.963 61.4717 li
372.963 92.9229 li
cp
f
401.078 100.88 mo
387.503 69.8022 li
386.099 66.5264 384.882 65.4028 383.386 65.1221 cv
380.48 64.6548 li
380.48 62.9697 li
399.58 62.9697 li
399.58 64.6548 li
393.867 64.8413 392.091 65.5898 394.335 69.9897 cv
404.259 93.2969 li
413.808 71.6748 li
415.494 67.8364 414.648 65.1221 407.816 64.6548 cv
407.816 62.9697 li
424.101 62.9697 li
424.101 64.6548 li
420.548 65.3086 418.486 67.3687 416.708 71.4878 cv
403.792 100.88 li
401.078 100.88 li
cp
f
459.023 76.2617 mo
459.023 74.1079 li
455.935 71.0195 456.214 61.939 443.578 61.939 cv
432.158 61.939 425.513 72.0488 425.513 81.9707 cv
425.513 92.8291 432.625 101.16 441.798 101.16 cv
448.632 101.16 454.529 96.4805 458.46 91.5186 cv
457.431 90.3955 li
453.875 94.6074 450.224 96.4805 445.544 96.4805 cv
438.148 96.4805 431.314 89.9277 431.314 80.1934 cv
431.314 78.9756 431.503 77.666 431.689 76.2617 cv
459.023 76.2617 li
cp
431.968 73.8271 mo
434.125 65.1221 438.804 63.7183 441.896 63.7183 cv
446.386 63.7183 450.13 67.7432 451.16 73.8271 cv
431.968 73.8271 li
cp
f
477.074 93.2041 mo
477.074 97.041 478.476 98.2588 483.158 98.2588 cv
486.716 98.2588 li
486.716 100.037 li
464.529 100.037 li
464.529 98.2588 li
469.304 98.165 470.802 96.1992 470.802 91.2383 cv
470.802 69.6157 li
464.529 67.3687 li
464.529 65.7773 li
475.201 62.0332 li
477.074 62.0332 li
477.074 71.9556 li
477.261 71.9556 li
481.941 64.2798 483.064 62.5015 486.152 62.5015 cv
487.277 62.5015 487.558 62.5947 489.335 63.3447 cv
490.271 63.7183 491.957 64.0923 494.205 64.748 cv
491.957 70.3638 li
490.552 70.1763 488.775 69.709 486.996 68.8662 cv
485.966 68.3989 484.843 67.9297 483.72 67.9297 cv
482.035 67.9297 481.003 69.0537 480.068 70.3638 cv
478.851 72.0488 477.822 73.6396 477.074 75.0439 cv
477.074 93.2041 li
cp
f
500.667 90.583 mo
501.789 96.1992 505.345 99.3818 509.56 99.3818 cv
513.302 99.3818 516.205 96.5732 516.205 93.2041 cv
516.205 91.2383 515.736 90.0215 513.208 87.4941 cv
506.562 80.8486 499.169 80.1934 499.169 72.4229 cv
499.169 66.2456 504.039 61.939 511.152 61.939 cv
513.677 61.939 516.3 62.5015 518.638 63.4375 cv
518.826 71.9556 li
517.236 71.9556 li
516.578 67.1812 513.488 64.1865 509.746 64.1865 cv
506.656 64.1865 504.039 66.3389 504.039 69.4287 cv
504.039 77.666 521.445 79.0693 521.445 90.4893 cv
521.445 96.5732 516.392 101.16 509.839 101.16 cv
508.062 101.16 506.75 100.88 505.72 100.505 cv
504.691 100.225 503.945 99.9434 503.193 99.9434 cv
502.632 99.9434 502.072 100.318 501.603 101.067 cv
500.199 101.067 li
499.169 90.583 li
500.667 90.583 li
cp
f
537.382 40.4102 mo
539.632 40.4102 541.503 42.001 541.503 43.9678 cv
541.503 45.9326 539.632 47.5244 537.382 47.5244 cv
535.14 47.5244 533.361 45.9326 533.361 43.9678 cv
533.361 42.001 535.14 40.4102 537.382 40.4102 cv
cp
541.224 92.9229 mo
541.224 96.1992 543.001 98.2588 547.962 98.2588 cv
547.962 100.037 li
527.181 100.037 li
527.181 98.2588 li
532.894 98.2588 534.951 96.3867 534.951 91.4258 cv
534.951 72.6113 li
534.951 68.9604 534.484 68.4922 532.048 68.0239 cv
527.65 67.1812 li
527.65 65.6841 li
539.818 61.4717 li
541.224 61.4717 li
541.224 92.9229 li
cp
f
574.638 62.9697 mo
573.14 67.0879 li
561.255 67.0879 li
561.255 88.8984 li
561.255 94.7949 565.466 96.7607 567.431 96.7607 cv
569.49 96.7607 571.365 95.1699 573.14 92.0801 cv
574.638 93.4844 li
572.392 98.3516 568.742 101.16 564.435 101.16 cv
558.912 101.16 554.982 96.5732 554.982 90.3027 cv
554.982 67.0879 li
550.675 67.0879 li
550.675 65.5898 li
554.326 63.8115 557.509 59.5059 559.662 53.7017 cv
561.255 53.7017 li
561.255 62.9697 li
574.638 62.9697 li
cp
f
611.666 73.3594 mo
614.472 66.2456 612.693 64.8413 607.171 64.6548 cv
607.171 62.9697 li
622.708 62.9697 li
622.708 64.6548 li
618.873 65.1221 616.72 67.7432 614.943 72.1421 cv
599.029 111.832 li
596.22 118.76 594.068 121.846 590.792 121.846 cv
588.544 121.846 586.955 120.444 586.955 118.571 cv
586.955 114.733 592.38 115.668 594.722 113.329 cv
595.751 112.299 597.156 109.865 597.904 107.994 cv
600.712 100.973 li
586.203 70.1763 li
584.427 66.3389 582.742 64.748 578.808 64.6548 cv
578.808 62.9697 li
597.625 62.9697 li
597.625 64.6548 li
591.914 64.748 591.261 66.4331 593.132 70.3638 cv
603.708 93.2041 li
611.666 73.3594 li
cp
f
643.719 81.7842 mo
643.719 92.7363 652.61 101.16 664.217 101.16 cv
675.356 101.16 684.061 92.6426 684.061 81.5977 cv
684.061 70.457 675.356 61.939 663.936 61.939 cv
654.202 61.939 643.719 68.8662 643.719 81.7842 cv
cp
650.739 78.6006 mo
650.739 70.5513 656.448 64.1865 662.624 64.1865 cv
670.489 64.1865 677.042 73.2661 677.042 83.9375 cv
677.042 93.2969 670.77 98.9141 665.247 98.9141 cv
657.196 98.9141 650.739 89.9277 650.739 78.6006 cv
cp
f
711.206 67.0879 mo
701.096 67.0879 li
701.096 92.7363 li
701.096 97.041 702.782 98.2588 708.024 98.2588 cv
711.581 98.2588 li
711.581 100.037 li
688.461 100.037 li
688.461 98.2588 li
693.889 98.2588 694.827 97.041 694.827 91.7998 cv
694.827 67.0879 li
687.899 67.0879 li
687.899 65.4966 li
690.518 64.9346 692.766 64.0923 694.827 62.9697 cv
694.827 55.1997 696.512 49.3027 702.036 43.7803 cv
706.62 39.1929 711.018 37.1338 715.325 37.1338 cv
720.567 37.1338 724.967 40.1294 724.967 41.5337 cv
724.967 42.2827 723.188 46.0259 722.44 46.0259 cv
721.127 46.0259 717.665 41.4404 711.487 41.4404 cv
704.749 41.4404 701.096 46.7759 701.096 55.855 cv
701.096 62.9697 li
710.551 62.9697 li
711.206 67.0879 li
cp
f
73.5181 54.1772 mo
72.7456 50.0254 73.1313 41.8203 77.186 33.7109 cv
62.2231 45.0054 62.0303 54.1768 62.0303 54.1768 cv
62.0303 54.1768 64.9263 51.9561 73.5181 54.1772 cv
cp
66.5674 29.4634 mo
66.5674 29.4634 48.4185 32.0698 43.2061 32.5527 cv
39.6099 34.6763 35.4829 40.6133 35.4829 40.6133 cv
35.4829 40.6133 31.2358 41.2407 22.7407 42.7852 cv
16.8345 46.6387 13.2798 55.624 20.6162 62.9609 cv
18.2998 62.4785 18.2998 62.4785 14.9214 61.8989 cv
7.68115 66.5332 11.0601 75.125 26.1191 72.1323 cv
21.8721 71.9873 19.7476 69.9121 19.7959 67.208 cv
19.6997 64.2646 25.4443 60.5957 32.4424 62.4785 cv
25.7808 49.8809 33.166 44.9087 33.166 44.9087 cv
33.166 44.9087 29.2568 55.311 37.8003 63.8296 cv
38.5723 62.5752 41.1304 59.0513 48.3223 58.9067 cv
55.4883 58.7622 59.9897 62.2822 60.0991 66.3398 cv
60.1958 69.9121 55.6587 73.6768 49.77 73.6768 cv
49.6733 65.1421 li
49.6733 65.1421 47.7549 65.8325 47.2124 66.5898 cv
47.2212 66.9824 47.1641 73.7734 47.1641 73.7734 cv
44.8467 73.7734 40.1167 72.8076 37.6069 68.8008 cv
35.6758 68.6089 24.9126 67.0151 24.9126 67.0151 cv
25.4917 69.8633 li
25.4917 69.8633 29.2568 70.4912 29.9805 74.2559 cv
30.8569 78.8105 33.4561 82.9922 35.7729 84.6816 cv
40.2612 84.1504 47.6948 78.5039 61.3545 78.6963 cv
48.8047 80.4336 36.0625 93.8516 17.7202 88.7363 cv
46.874 98.6797 49.8667 76.5723 86.3569 83.5234 cv
80.6616 80.0479 72.1665 78.9863 72.1665 78.9863 cv
72.1665 78.9863 76.7031 74.0625 76.8965 66.5332 cv
77.4756 66.4966 78.2476 66.4365 79.6963 66.292 cv
80.1787 63.8784 80.5166 61.4287 80.5166 61.4287 cv
80.5166 61.4287 72.5527 61.4165 65.8677 61.4165 cv
49.6011 44.957 66.5674 29.4634 66.5674 29.4634 cv
cp
25.8296 29.1738 mo
30.415 29.415 35.9883 26.5649 36.3521 26.3267 cv
36.3521 26.3267 34.4204 31.2012 38.7651 30.9111 cv
43.481 30.5967 48.9092 28.1797 49.6733 27.8228 cv
49.6733 21.5474 li
49.2529 21.856 44.6572 25.1045 39.4414 26.2783 cv
37.5361 26.7065 38.186 25.0229 38.3789 24.0581 cv
38.5723 23.0923 38.7021 22.3032 35.29 23.7197 cv
21.3408 29.5117 20.6162 25.5542 20.6162 25.0708 cv
20.0376 25.7471 20.2832 28.8813 25.8296 29.1738 cv
cp
99.77 .119629 mo
99.77 .119629 99.77 98.4609 99.77 100.059 cv
59.563 84.2271 42.813 114.926 0 100.059 cv
0 100.509 .000976563 .119629 .000976563 .119629 cv
20.3701 .119629 li
20.3701 10.9082 li
32.0518 10.9082 li
32.0503 .119629 li
43.5391 .119629 li
43.5405 10.9092 li
55.1226 10.9082 li
55.123 .119629 li
66.707 .119629 li
66.707 10.9082 li
79.3047 10.9092 li
79.3047 .119629 li
99.77 .119629 li
cp
f
138.139 136.057 mo
138.139 136.057 137.663 135.821 138.57 135.062 cv
138.681 134.969 138.856 135.176 139.384 135.182 cv
140.094 135.191 140.466 134.946 141.055 134.236 cv
141.945 133.159 140.089 132.747 139.486 133.263 cv
138.824 133.829 138.35 134.417 137.782 134.935 cv
137.782 134.935 136.828 135.784 138.139 136.057 cv
cp
172.558 186.542 mo
170.965 187.844 166.042 190.329 164.811 190.909 cv
163.58 191.489 163.185 191.84 162.277 193.635 cv
161.166 195.834 160.104 199.817 160.394 200.104 cv
163.435 199.622 165.607 197.065 165.607 197.065 cv
165.607 197.065 165.655 196.438 164.979 195.372 cv
164.42 194.493 165.51 193.542 166.187 194.094 cv
166.701 194.518 167.417 194.602 167.852 194.239 cv
168.286 193.877 177.771 187.844 178.205 187.145 cv
176.274 185.237 174.802 183.307 174.802 183.307 cv
174.802 183.307 174.15 185.237 172.558 186.542 cv
cp
135.488 160.09 mo
131.433 158.448 130.526 157.35 129.768 157.026 cv
129.093 156.736 126.301 157.922 125.834 159.124 cv
124.58 162.358 121.78 167.643 121.37 168.391 cv
121.149 168.793 120.912 169.262 120.959 169.792 cv
121.008 170.323 121.165 172.399 121.117 172.881 cv
121.068 173.366 121.141 173.993 121.333 174.475 cv
121.526 174.958 121.78 177.032 122.842 179.106 cv
125.208 176.743 125.554 173.254 125.4 173.944 cv
125.396 173.961 126.149 172.667 124.266 172.084 cv
123.73 171.918 123.809 170.526 124.386 170.346 cv
125.087 170.131 125.449 169.936 125.787 168.684 cv
126.124 167.426 127.398 162.917 127.814 162.045 cv
127.877 161.913 127.995 161.686 128.229 161.577 cv
128.59 161.411 129.023 161.293 129.383 161.235 cv
129.561 161.206 129.9 161.399 130.004 161.504 cv
130.647 162.157 133.992 164.868 133.992 164.868 cv
133.992 164.868 135.488 164.723 136.405 164.338 cv
135.826 163.42 135.585 161.2 135.488 160.09 cv
cp
131.397 141.024 mo
131.397 141.024 129.985 142.762 131.578 143.198 cv
131.615 143.704 131.814 144.7 132.013 145.223 cv
132.279 145.924 132.737 145.696 133.244 145.114 cv
133.75 144.536 134.566 143.436 135.163 142.799 cv
135.705 142.221 137.595 142.426 136.828 143.594 cv
136.32 144.366 135.922 144.573 135.271 144.717 cv
134.756 144.831 134.601 144.391 134.041 145.153 cv
133.45 145.952 132.819 146.51 133.859 146.51 cv
134.402 146.51 135.434 147.016 136.122 146.907 cv
136.77 146.804 136.842 146.383 136.912 145.802 cv
136.984 145.199 136.867 144.85 137.54 144.475 cv
138.408 143.993 139.688 142.834 140.074 142.424 cv
140.518 141.954 141.087 142.063 141.667 142.063 cv
142.246 142.063 145.045 142.401 146.71 139.903 cv
147.885 138.141 148.014 135.74 147.579 133.568 cv
148.376 134.364 149.446 136.867 148.882 139.214 cv
147.879 143.393 145.822 143.627 143.742 144.065 cv
142.873 145.295 140.653 148.458 139.471 154.204 cv
138.963 154.54 134.764 158.594 138.275 165.245 cv
137.37 165.545 134.702 166.684 133.123 167.04 cv
132.062 167.282 131.173 167.336 130.746 167.848 cv
130.263 168.428 129.153 170.311 129.732 171.252 cv
130.143 171.918 132.773 177.803 132.99 179.616 cv
133.207 181.424 133.862 181.854 134.511 182.44 cv
135.234 183.088 135.705 183.055 136.719 183.815 cv
137.743 184.583 138.595 185.965 139.542 186.709 cv
140.557 187.506 141.69 187.868 142.487 187.793 cv
142.294 184.852 141.666 181.956 140.749 180.991 cv
139.797 179.989 138.602 181.424 138.312 181.497 cv
138.022 181.569 137.619 181.292 137.443 180.483 cv
137.262 179.651 138.022 178.963 137.298 177.877 cv
135.95 175.856 134.667 173.584 134.511 173.278 cv
133.569 171.434 135.167 170.944 135.561 171.036 cv
136.502 171.252 142.149 172.012 143.018 172.084 cv
143.886 172.157 144.367 172.303 144.755 171.868 cv
145.95 170.528 146.638 169.551 147.326 168.174 cv
148.593 169.116 147.724 170.926 147.362 173.073 cv
147.724 173.389 155.905 177.514 167.152 174.522 cv
171.849 173.274 171.314 174.258 171.761 175.125 cv
174.488 180.411 176.418 182.458 179.653 185.045 cv
180.618 185.817 181.293 187.071 181.729 187.793 cv
182.163 188.52 182.272 189.807 181.922 190.643 cv
181.487 191.68 178.974 196.186 178.543 196.821 cv
177.722 198.03 176.651 199.042 175.743 199.524 cv
172.895 201.045 172.184 202.411 171.87 203.471 cv
172.521 203.471 179.182 203.471 179.182 203.471 cv
179.182 203.471 179.353 203.092 179.266 202.178 cv
179.146 200.901 180.304 200.684 180.667 200.612 cv
181.028 200.54 181.68 200.827 182.259 199.454 cv
183.348 196.866 187.592 189.655 187.955 189.002 cv
188.316 188.35 189.643 186.608 188.341 185.842 cv
185.879 184.393 184.434 182.012 183.949 179.348 cv
183.755 178.288 183.871 176.538 186.266 173.557 cv
191.381 167.186 187.569 154.057 176.178 154.299 cv
169.717 154.436 166.124 153.885 161.915 153.043 cv
160.376 152.735 160.113 151.907 160.442 150.967 cv
160.78 150.002 161.106 148.084 161.118 147.299 cv
160.008 146.286 158.319 145.659 157.498 145.37 cv
156.615 145.058 156.17 144.354 157.064 144.283 cv
157.956 144.211 161.335 144.573 161.335 144.573 cv
161.335 144.573 161.456 142.762 160.973 140.108 cv
159.525 139.479 157.69 138.948 155.761 138.708 cv
155.252 138.645 154.806 138.072 156.098 137.887 cv
157.788 137.646 159.333 137.913 160.539 137.838 cv
160.611 137.695 159.96 134.317 158.765 132.951 cv
157.933 132.7 157.492 132.583 154.602 132.241 cv
153.588 132.122 153.54 131.83 154.216 131.612 cv
155.001 131.362 156.303 131.106 157.933 131.213 cv
157.305 130.346 153.105 122.684 144.394 124.989 cv
145.371 126.182 145.841 126.736 146.131 127.558 cv
146.391 128.292 145.614 128.527 144.9 127.777 cv
142.149 124.879 140.701 124.952 138.927 124.625 cv
140.085 125.749 140.593 126.872 140.99 127.993 cv
139 129.405 136.176 132.77 135.778 133.423 cv
135.02 134.663 136.068 135.33 136.068 135.33 cv
131.397 141.024 li
cp
187.689 121.622 mo
178.784 124.735 180.097 134.333 182.501 138.033 cv
185.638 142.86 188.293 142.956 190.296 148.627 cv
191.858 153.051 189.065 155.36 186.314 156.374 cv
191.02 159.272 195.871 156.277 197.608 153.38 cv
200.808 149.116 197.183 143.579 200.602 140.688 cv
201.515 139.915 203.063 139.384 205.138 139.288 cv
203.062 136.342 198.187 136.68 196.233 139.432 cv
194.857 136.246 190.995 133.461 192.396 128.523 cv
193.313 125.29 198.429 124.082 200.359 126.736 cv
201.416 128.19 201.566 131.033 198.477 132.483 cv
200.408 132.338 204.076 129.006 201.566 124.468 cv
199.804 121.282 196.836 121.042 194.423 121.042 cv
190.03 121.042 182.742 126.063 187.4 136.898 cv
184.721 134.509 180.377 126.182 187.689 121.622 cv
cp
209.907 110.339 mo
209.907 108.744 209.905 210.392 209.907 210.398 cv
154.592 223.865 152.998 194.47 110.136 210.398 cv
110.141 211.697 110.118 110.33 110.136 110.339 cv
149.522 93.832 164.873 125.109 209.907 110.339 cv
cp
f
36.2954 167.421 mo
36.2954 167.421 34.5444 168.566 36.7368 173.375 cv
38.9282 178.18 41.6489 182.658 36.9136 187.939 cv
39.5991 187.97 45.4614 184.429 39.189 173.875 cv
37.7466 171.445 36.189 169.761 36.2954 167.421 cv
cp
30.3618 169.687 mo
31.8115 169.589 31.9951 167.815 31.7324 166.881 cv
31.4238 165.78 29.583 165.643 29.1401 167.045 cv
28.7017 168.434 29.085 169.785 29.085 169.785 cv
29.4487 171.124 30.9561 171.506 31.0854 171.371 cv
30.248 170.622 30.4751 170.189 30.3618 169.687 cv
cp
31.7559 176.077 mo
31.4058 180.327 28.9688 180.952 28.9688 180.952 cv
24.7168 178.997 22.4355 184.35 26.0039 185.927 cv
30.5264 187.925 33.2944 182.08 33.563 181 cv
34.3252 177.936 34.397 175.77 34.0562 170.793 cv
33.7656 166.551 34.8115 165.911 35.5088 165.794 cv
36.2065 165.678 37.6602 165.622 39.1123 170.04 cv
40.5659 174.455 43.7012 175.095 43.7012 175.095 cv
43.7012 175.095 39.1616 167.708 45.4761 160.887 cv
48.4121 157.716 54.3989 155.915 53.2905 151.475 cv
53.2905 151.475 52.3647 153.067 50.5625 153.532 cv
48.7607 153.997 45.2734 154.52 45.2734 154.52 cv
45.2734 154.52 53.6431 150.567 55.1543 146.033 cv
55.1543 146.033 57.7695 150.393 54.2817 156.786 cv
54.2817 156.786 57.6035 155.597 61.1772 157.211 cv
70.2861 161.248 69.3188 174.223 57.793 177.317 cv
41.3896 181.719 47.3452 194.408 56.7397 195.186 cv
55.7319 194.547 55.5029 190.72 57.1523 188.45 cv
57.9756 187.715 59.4487 186.234 60.3833 189.345 cv
62.0327 194.845 66.8452 195.292 69.0781 194.605 cv
68.4941 194.112 67.395 192.438 67.5317 191.475 cv
67.8071 189.551 70.21 191.549 71.0835 191.796 cv
77.5449 193.629 80.9819 192.028 81.3481 191.063 cv
79.9053 190.764 80.1567 190.928 79.2407 190.696 cv
78.3862 190.483 76.728 189.3 79.8364 188.588 cv
85.543 187.282 88.6816 181.395 84.9243 176.859 cv
81.3369 172.526 76.814 173.19 75.3457 173.786 cv
81.5322 175.116 81.8438 180.096 78.6904 182.631 cv
75.9419 184.694 69.1138 185.518 66.7759 180.936 cv
65.2979 182.002 64.7827 183.708 65.0347 185.839 cv
64.4155 185.608 61.8252 181.921 65.6753 178.875 cv
83.5249 167.368 80.644 148.03 65.5376 140.071 cv
65.3501 139.989 li
51.6455 132.116 39.6558 139.301 39.6558 139.301 cv
48.1289 130.815 62.772 135.864 64.8784 136.917 cv
64.8784 136.917 63.1943 135.451 62.2979 134.106 cv
61.1367 132.365 61.1807 130.702 61.1807 130.702 cv
55.3672 133.947 53.8677 128.961 53.8677 128.961 cv
53.8677 128.961 48.8335 133.499 45.5664 129.808 cv
42.7104 126.579 47.3345 122.199 47.3345 122.199 cv
17.8477 131.877 23.4365 148.527 23.4365 148.527 cv
23.4365 148.527 19.166 152.45 18.2104 161.901 cv
17.125 172.637 22.4731 180.274 29.1548 178.176 cv
30.6851 177.696 31.4453 176.967 31.7402 176.16 cv
31.7559 176.077 li
cp
99.771 110.339 mo
99.7886 110.33 99.7656 211.697 99.771 210.398 cv
56.9092 194.47 55.3145 223.865 0 210.398 cv
.00146484 210.392 0 108.744 0 110.339 cv
45.0337 125.109 60.3843 93.832 99.771 110.339 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 15.0.2%%For: (Dani) ()%%Title: (BU logo_Black.eps)%%CreationDate: 19/10/2011 10:25%%Canvassize: 16383%AI9_DataStream%Gb"-6HZNFNOsbRj!5CliD"r`J0qo38J1(%$MDBN@6amer>;M;mM%6ObQJ!lSJu%K$I/8bKquE7e6W063=mq?H/O$IZE.C>#O`,X<%aj[<"Q`n^gh`SUKq\Q:\af_-kWu0#0\9RMb-i\SnmH/SiNB'Zj;nKq$fhrdP6fTM>+rggU6@J4Reb\[Pk47s9c..,]H[C.J]t1cQ%@eFhi[f5OLPG>=u?VetVS!0nBMmL$\0o$DCNW&1l\*)MtIsub7C30!cb*>;$pK)hA0=PS42IEQ\G6*29\_b&K]m3pGh7WaPU4.J_%+/H[Bmk6SCGBM.&XelTlq!7DKFW=)/l@5H*a1%NskI5XoB6WN?QiHlL^@LFOqVpl(Vu$0%A)40a4,h1i<AOA(k7[HSS>?+-Ru?V"%g"hB[A4o)p.rV=Q<u^N(WU9$D"eF07'S>FJfO.`ob(mq@H;u,=4O>goH$@!uq2<epA&6?4?_*\m8rmlX?C_$s`KB\>RcM).o'P3!%k2n=`kBDN;UT]P;qt8M*c*iYA4b'b#,E,@pTBY70_09NND`2g)+Ki.k$!CW:1>YjZm.BY2btW](2qOPBn#g!f=J&^U=4%mTfZL@u%276q`ilX`>JZfn#?JfA7n'X@A7U=sn'oS\HYD`>'c2!k#b:g/\kqH:>T8C:L_jF@6;Y\_cq<Lc^Q+XGNj&mDbiEsDc)1KQCh;.3k%Vc-1Yq!6e_1`_&D6=00;O-Nm%cd"$Z:#-P5>3.fRVj4&1T:Of/<>8U)=9#r/qs*E!G=8*&rGmq4a%5)\U$p%BJ3$1bSYJuOUJIGE%:MHBi</f<V7f'1RejA8n<K&:Qkd(t<;[To]Kf0VCUfO<g/,G7>;leqgC3=nt:ECV,-ca9Wk2_1Z4ZS@]Sj#0.cVI<s)&]]<=2lJ'%PY^O8I.#e+-hNs5d@BD^[A#ZiVXbVLLqZe,RLstGGln`N/Bs$cdpFpVqG'0[Stp"f&UgR&dnbSDSEQMq9mJt2U3Y.1C3+D^0WYeE%>];5r'J.XUGuA6,UR/7/f];EVEi]jVa;;7Yq9aEO8QJZ"/YC.Bd8+LGo>:nC<odDP++:'%BQg]\oNap]&Gf/(BR]SZ<`,e`n1*n)%2hD6IjIdTrR>aqG:9=Y;^l-EA7Sb7qEQNR(B<7H,^_aDPfmtnmG4`/c>!AeYd<B=OoM+ojSB/&/S_DHW%R'o)A+']cj:+H3TOH1S%W/X8!PTmJbI=X6j]Z]LAlgeAu)iYgfK"9"UW>48B^!$$<\U;N?AS2?-bF/fVUk]W_')M"-?(O(O"M;)1/E!MV^/-cP^=+/eh.[-V%]rs2qgt.*H"AI7m*?,hG`f'R`^[e0T'7\D*iJL+>XHcTX:\gaVN5#-aq)\9r"G-3;ns,C9h1*RKcLQ2)G^%`BUEfT1s-0^b:Z_'E%;n``*H1joSrMP$kq5+#FJ'-Bm^4`--g<k+I=8<ebaj3"4l]6IuM>dnVj<QnCs(NjMd^,.$UO;WK$7@4/q6Tp%VNmk4!j+o"kp4Fc%q`j>OU\Z&sk>+jOn+q.n"2.PRe>gA\jDFN?I2unuqq72><h[jV1E*grqU!"L,s>*q9uHQbRV,QppDeQi'?u8XP53L]BI)hFE:PsG%1)b%[,5@h/"V^MWp[][bd!MMU_2dQt?J\ET;*P2K?L)g+AaT+XhC<r5/Z:UW\$W8U9[Aa+GJR>V;V1GAGY7FdBD^=p]fT3UL=$T4%TB8)UD"[O8dh0cT3B3HF;hCpngL!DK3dG>/Nka*lB[(;\6nOd1UF%WEFHh>pSl^Wp?dug8R9+sr?/aSJSa+?QrYo\ol"p$`Ge7@;%hQ:kMR<;,dQ($_5fV5VYekW#hm!F9P`kPRliT0'fI4CkXe96Yr)V1<G;r@L!k)0riqW`Q_MPpd5@sBN-[dF9Mfr&]DEI=f`7!_>g%h>="6]J=>Jm-bi1Vi46>?CEVCE[%kYE*fpc_Bd#>I82#b:Nb77n0qc\F<dE%.-R22"+THb6dMDAGt(tib:p)05>D?V>pAT,oHS,^%9E<gj;TL]?Rf8VNZ/.9qF"<^POlAt^n-"4K:R)sWp,RO^#sZKP\<CRlQft4<a\QD"'1Vg>_)q.VIMP2tI?,C[m-pc4k<-F(G!:/+%m+6PqUnr4"3QUXU.kN_\^@P%.6iHpUH:BXSn/U-o'[Hhf`3i@)430C7Zf#!Yf%6]rZsX"5S+]m\Fmp!3h9KnJIR,?5X=UK@N3(?h%0F#2a<?u<Y>!0XbZ/1B.WLjke\t[jL-iI9h:=4r?q;f`TrJQ.?GA`qgaJo"bf_N$tNi)u',gLDXk:#B.8^pg37OZd(r<[ZeGF._3%C/6A2k9aF6De"egT&+gp=6Y*qPHsYhrc:1*NqhD14C>T@op'NGbF:e%IJ'i)YqDS;*T]KRUO8<H<kumBQ1bki37Eg2%e!_1_/Wao%]t*TTh@eDT;+--Oc7!VM:-:QLXEDVd4%j/iGtiVLUVbeSG0lf:>%.EIC\kBS-eeQ1=qL*%r[/C1gq)J)bJ'DpB<[%Zr@$5p3tlj]%[7u2t+eus/n4?c]Da"WEPk!1'h4;+YGXAn]NCeTF?Ecr7j7Ls4q8R&&o`U.BCQ&O9=mE8<QI'C24(q]=W=e=baYP$nR@M&5N`>j$%%*^5LINjbj3PX=4H3/C;GcnaCALd$G6rmPVkBHsR%/_C6.??X8rZ4)_-qipu=eTe^.ds5hUIQ4_pKY^XKC5Q(/uS-[@\_-u:WYU$%bS,+a^7kM]Ba(QkpDN1Vs"!XRF>H+/6o0aK0%VKIY&BOSkO7o.bZeV9rbff]]=`"9_iVD#YA'5ETEjsMFo=<k3&3ST9Y)&#pfZd0%E\].PRqTa5@%q4up86,6"^@ZW):6^efVK*]1$gjp.BBd*<Qcq(/bS]dgd*qWA8KZDoNW7[JO(g16<>?UK+H,RII0Jlm(A:tn%`-6%/i&W*3=um8CL?]r9mmLgYFinWQfNDMigj\n2Vg?=*]6M1s-FQYB"pF10$+H%KKde[VN]t_E,soZd)Tds+O@+QmT<tSdr%`U&1iaH%f.[:(&*qhY<ut:I597:,8q$C_Mi>6u-sb>".8E8id+'cp%ubGBXP.P2j:`F,SgKQ1N.\HDg5KgtEBZHm-QX(G%p^XJ*(%>EF![f`%a[$TTo4XridFQ_>%]D_iq652gf@(5LM$>$VY]q@A&_?/F*)H:pF[c3nGB$juoV^35UCF%m5a]MfLAn]h$IIXpErtBMY@&B<l[0"R%Ptq^1<Usg=+C'kPBcOG)_<+U=Ol&UE-GJ0?VK%Q'q#.1";rt1;FX#WHWi($Seka4:22SCekF.neZBo`8A`Ri<p6>j$a@Se+`-KmV%=Qj"dfu74r9K4kir$h+rXAiC;U-u)<kU#e3fera#LJ4apX?O821Ih?pg]<RLgB43o.DJ[Moo_=kc(jSZ<c(,Z[e]>&m0GM0SLZJE%Xu0j0M\GnpBgpZ()0W!iT=CQ9@@%DXQ(O(WC5crISDgEKqT5t"L3!O,4jlNT#*--=[e-2d%>[_K,`edE&T$g*/]1fpc7s8qbjV@0%:$9YnLG#-uiX?iI3L;D<mP%7YrD]3>EnP1]=NL2Z9UOf/9=:,qqkB]FrDXY1RSeR8Vh#f-gnhp!gsIEqVRL9h@eXI.qdb$+FjL/X%(;$nZSY!f<eG%!k1Z>ZNcuXmWT"o6BG#I-J@M]pHQ7:A1D$8ZQ\@ZqB\i@lef';,rcoG[GF_g]^Yoe6p\1-">bL<bO9\!K:Acr9h%ViEkE4R$O@)o1b_Is8F.EXP,#Pob\o*uqqs9@LbAm#q5=%/ITcUI`Q`5I,i_rI]2hJ^&>qnHik9,^Use,4o!EKYO>K+'kL-5GAsT%p0uFYADXDA_+LhWqNEQc?W/e4r-!I16'3;!Lbj:)F1&]-,G2C$q3)Va]=6B)6,A'Np!6^Ip%]nf0c^+Z5KSD'^3s3MqU<^>gZu$q%J%.Q7o]YtuX3KqAS$R6S[ef.:h_sf4cW6YfT`=`FmJ5T#nEg)LZNiQQfq.#9<q9[IR/b+Na.Ighq;LW$U-C9W0/)4"[TD'J[gdA$%q0M^PB/eG'GPuo9G'S8;@X.57o_`"njK.@>pYB9HdHTfUp:;H,+5nP.06j/+nBlTqkj7`Xe^NpJo(?kc>Q1-'>[WWepL6ht0/or0%2fEVa>^^g=[;FaF5AIk^R%`%/O7A7nr4qDQQ\(n/2edp#2]^`0rScU2>MoI8qV`O,pZ&UIpAE1[g%CEhl_PCKI,<^*TD]\FqW6_e%eb8q7U=7QkH%'pXGJ;pO?Mnhj\%-a^2o<QFkEiA&+Yn9-UV47KVC9O9M]^9J2r*TPO!i`R7I)Z*[;t2fa$+e>)"ZibGbRea#G;!@%o5gZJo@^se3i`5ZrTAgB#A/+#I=Si?$N$\!nLsR%^K&Y,/&1q,ocO2oX^4rtD\&F=q:$I_Yfb?1$!FnXJ0?9@SeA7i!,R^g0(jL9%E*5[haiM2q6[V8'U:-N5nE/dBl`]tYHW[rRWs[#;d!OrTAHdh1Y(jcWE1$Tg=2tOnoQXL'1R:C<;k[OR@EFOV:&-J=otf@95HH)P%ZX0Os4*cHbgWX:T"jdWrR$$VU^G@#"0e`2:j.T,s&3(Z,iX9l?iaFCW;A\<=`3e!-8D^)i[+OVb(d%iZ@<PMZ["hS9Olfet2OdjA%'h'a1*JD`8oK[*2\KTJSQ#Q;oEbO8CL0f'9R[9<hA,=SHD>LZD(dejBn2V$&Zo`aUCGnaj2]8gtL-!=gda<du'J.eIm7U`:S<DL4%:/I.?gST([]T:Ll\LccHDHg>@&p4UH\q4WIZu'3>+0RhG.`+R[=YLGO@n]jl=mhW,3DUKE9;P/aWRQV_k4.$2LA+R$QVQ;d\^f[6%Trm5r!Bd`KZ[Rn_[M?Q@:YOAt(U=f<A)OeenB53SCBP0^:"YDLn0<7LRuB+hE*1)%V))bi&77V[_<AIA"n'jWn\Ga$"+=DRrMah2%J#P!hDlZK2X.P17ZU9t_I@-;ap7\$f*4N"bR=(NeAD9:$IKpqgicj@$00VFXHguIP\/2m^NuJmLhIhp=U=0U16q!=EGBHh`R\+T0%`C9WJI.P>G_DbgAr8jTQ55f<jn,HF<@qh]q-Snoc]gRrr-A24'nUjo6Gum@2h.[&A).X))6X?*"K8'6.";r6qalAkCl-O+T^e\(h%M&AcoMa%!=Wu`d$9=/3oL+9U]8e2*kM2rp+kX*8RpI`T-QlodT.T\]32Ob)Z\<&2l#ufEGR#KYK"^@K<$[#[N^`1eRV]r<m.Yk`?%h@5at]/m<cNUj3WH>B;B`_)C-QC3<@^-h"+P7t1"4@P!*pIUAt%q*5,Z.qcr?)VRFB'1VZKMP;\RR>OEUjZSf.cFHl5QnEY.i0.[%A\fEF['_Eodd*^QA3)9-"r'BbFO;UB.bIOUQJ/bMbF?!7)b_peS?cEP^5Fs5+j1m$d0K'K')dMNF#)I'1PPX5ji3QKJrETlkuXfZ%<eiaO,HL#<6af;$'l@)*]o%QkG86s9`(G2Q<bSjA7>m=rT'H*g"HHD0DIR/+QcIh98e,<o%F),7)oc9.#TO\N"KmATg8gul0h<,&%$/8(;d<^GsPrcdKHEp8j-/iIKX?sSmTZt>3RG<Jh9Ketf'%RqQ+@#!83[bQH='qqCQ4KNbA[7iYe%mLp3,n+=-(/"DLWWo)N/XJe%<f9K^g(Sn4::?ma15&]8%k=14Ql!@3<ujQ59IlBdR]%JDN?754$HrW"^J*m-.IR6a3N^j;1N4iBN,5%3@d/KurdFjDK??7qo<kj*%Y8!SO:9P*d+$g,BUM[[Se(R7+qV[V_`\CQQSR,[V0Jhf>%UdtXof*9[X?q'd!EMg5FW&d9F)^5&Zsp@JlNpQhKM8'a!"c*.)_:9^%V7j]CpXj6dc:60s_e<8Xj1P))!9B6skC\R;bcAS)XNK`6Q45rZ<s2WL;;;3K.e-Q"\iuL6lVd!8)g\of>F<rg":>9P>TNN5>H`+;%p"FuW#R55imEfX@f00ZY3L/RRPJdhFng:e$[.8t$T`VPT)*'_*,blB1Q"SaJ"?h;$H/k1=pJ1$">S?bXhlji'nlHW4fP+R9ZbWq%%p=b)(&TmLrg>6V;eh.#SR!N@<`#;"B?-t[\0U%4&eoTRMmDAY89iL.Y*pBUSfYgCK)eL5BH9$IfLN4]sBVWEoFXaDRMB^BYqCWri%b$qJq.OhF@>Mk^Ijo&"[HL%)[b"O_#%SE1k9Yb9oC0".3,*^6<X`F+u$kR11l=$EnW-i8&dI]cA<MZo&=G39]gOtr`.t[Ep=='97%X59P8B;Qs,m@@9cPs=VM2?3`RK=^r-%eI,/%'2S1c$SinE<$)_(i/GZSCJYbP]#akc3+ln;H<I\)HLin#-c/hQ"0>fe.jN`(J&2#%f6&%JFB$Dooj13]W?ea;N;u6%VQQee\#f]s.4gSj]ahht"9WlcD<l>7f,bD_EiQF@4?(c.9rMQqVLq;KML6rgc`9s/gB11S]4q>X%b'uk0*I=Pl;iDX4#SbnsVmr;+PoAot[e!f1i&H<+\;drk3m;@M#=)&?Din&Cb)'qKRu2"s-4Jf[Cq0&U.Pn47DV5%k2UG3U!UL>*%<p6*;mbh.;pBsZd%[A3Yp?O<2A8;'<Nu^-*Gm=i^m<oICg7(:qP+%,j&*]>g0<$GZ!Y-[tLh`6loYcPb4.$YqNnGXf'C&YP.:T,[%U^5E>;Gns<oidTm=L=_5XC54/g96:]'`!]e^cXW*=e(XVTFFb0nktN^*<FjO-KVHa-EA?s<%!3AZ.5%R*s[Ih;=X+t$Cg5aD2o;>%a%'1t-$WcrrW/DZ:3t7[i'c4E+Qg]W?<"?-64G,;AtgGiMlNt3,``S6D'1FrHUn,Pi"TJ6M%Y%VWo@m$;akQe,$-m`p_s9R;h;<;%XkU_YX&(g*EsVVe4gBkcodO*o<>,9%=CjB8CL0M-QP:ocUnmts%&1Ur312=u>U3l\Q7!^&[OI#T_6bMhD1bF8lQkJi#\UI=)44%E%%_Sac$kB;&'$scug[*Z0(t]0]b&kV"G$p02!KJ&g?$'OHa]1S+\gl@a_eI)I/[TKFG9X5.86nL9;r`q4)gS2qK8\s/(:Jlm#I]ZS%HQAI_]HI:kBiIM7;Y7<5FFB"'K8PVJRUQWX$4A.[<(+0fQI%!q[OH$-D*T(;;e4l)gCe".6D.(`"r$aV=;cW46i=2EnOd%Pg'/ci%>PWCm;)&a_"Sj@p+Ul.r4lu"p>=Fm>bLQjLK%QqL4_3<cU?o7$ZVFK=`_4K+L4\G4D"3CfmF:1;;Th,MN)RV-JZ4?RlS_#_R'^]Q%*%=^K4-1g:VW:&$$lQ.VUg)VL5aKr+lg$&/*`pq.43Y\Uob=XX@kVG*[/hHoQ^^RG3Bk)O:;L)P$mK&ZD68SYc=@]/'deuCH:Y@/%X3bW0*1(EJ-&]48YC]Ou7]Xb:fSj;@*E72_a[6LkFU`FKP=Qt+;$Ffj)0!M&4(/lZ.s253]T5bBff+Xf;+Q>mDd-14aL(9/>OC@F%:9DsW*C_@\$Q+,e6GCot':Gb#"!^so.2G"bMJV%6O@J;M92eba8Jr2E>(MCkkbTo8p.LS+V#//gQ]-Jp)FJ5L";0!\X?T`/,7#?X%W$2Gcb#AOFjI-C@eLC%Q8Eq6:g;c61[4IIqc.T1rmM(TuFr6$(@s(?7!Me;LRr%)Pd/d!OUT?foo*;B'3N%nfjQd.kBX6AS+l(:Z%O!(GiV#F`<ZHkjNTQ@fH'\p-[=:h$ea:XY<gNl`A13',rpRmrh8L9c+g'/OMos_M@UQ.8OBj8QZ>[R2&>n0krM#siC)+9X6G3F0R%5mD@oLM!h:Leq'%hMKpb*ftVLSRu=H=Jo(DAj%m6bGmIb'jMW.\j!f0qugZTL']8K+K6VMa#5k>UtKW+cnpQ=?("-eI9/k0<,nJA%,0\]8g3>O#:/@YTWqXAI8Y2X"1g5^%?m,lDE3f$i2PrZ82ar.<U2p@[N4qD3h5AQ:qlFWP=*Qms(K%esZ24<%g?>Tqcs-pSMAH?6%et](bkb,kUgY-t;'[1*ir526D%qq3ke8Itfj2ctXA8d?om4:8hd&Sm((WP^j,A*:JHF`s<Ci:8O.XSBj0OlphLBH;LIS-6aUmmtr%VcC*+Z!M.pH9n%8,W3cp79"gbOjTb+)W^Q<a]&`j?#a=,`PAj_L(_q)X_qDW&X'AO_.#k=5uO=GegQ&sWED94#G*s^HB:VUh-"('%Vfq[iLt[u'k&R^;&uUB!?"I<Hbu:P,!]j@j=/?UO*)-o$XDAiV<$r#EACI?fjse=tX@D/?'jRTMTTU?hq[>;MUtmNhA/g[cp?Za9%F'O6oM,UmGG0.DF6&^p#a_>Tk?r'AlDS`fg0Sm=F&jHjcf7`)/N#<m%PI`>_lgZdQq;e#Ek=[nKX)sUBgHoE-f4M`5&!INU5iEF6%W5@qsk\[VXPE:Ep*U^9dqgJ!$.fgosXN;+*_,4IKY`D2iKKG3^"Dfa@9]SO#D(t69+g<"K;=mMLK,4o(h7T!i0ji[O3WorXW!RlR%LI7%h+E-s!Te=8>`HkJ7Cs(1fSF)u=qR0p:Yfa[?qIln'))HcB\ccUKP?C=e1?).Y/N;pf`B&m`Xb3u9Ml@_e[B3Hd<ZVrGC0R3[%l_u;"c"'P)H>&E\$'b7KoPgc7CXM[`^n*kRa\9X1eX_ebFtluD"m!bQOL(h*qGcO[nOqY;`WejAl2"H:H-NZu7C!nt>F;9#<Nsmr%H0(c(CBM4mA1=K=d6fH-BFGB%/&t%^B2[bU)QcBTZr=dhAY[:c7?,GI`JJ%`)f7%`.XA#9Sd8R8?/X\C#ma6*n0O$E0fk:^n9W5Y%7V>g'!E?SCC2iiWKhfANRk3jE0dr,/>6/o0Ds>msiQ\2M:@BNOP%'d-';"$5&W"XJ-R4p'kVUS=(3ij;NG%pY"(/'C.NW1+>Mm-a%EnE=TcqTt=$[NhupdTKrDB]*LOm\#a3I'c1Pd&gkKrP1*PK=QO15=^$%+df42<"W1+ZHi/)2dtgW9qMCK@n0n/QK3mNJf$S6njL=%,Z_3B6KFsOoLoi#0'H3kn0'\n)@n+fkP*o;`bE38"DR0Z84nt?_"/Q*n;+\;0qe/X&JAqO3()HCdSph^*qrh5pG3Wb7gY<_+"ot#%;G9=oam=*R%\Bbk@t;cU?n"9/Jo\u):_3WEB.dX,ikuK%fMtneTJm'`ZOr\CV?@.G+aVZQN>d%f[fCUO)cOo32T%1%oX[7l%03AW%>!Khq9U`mg_Zi-T9r4F[D.j>W,SQ__?s>^Xe&JFd8aj`,F[DI$"s=)<L@,N9?l,9laGJ`-lj(N4\2.+.U%/XID'h$h9km6GSQfq>%7LVkdb#I\1Yc"KB1,17Y<)M-KaL<m^V54NiOCZHEWNND;f3oYAP@k#"f!Ed]R](:c]4B!+5rO!cCGJt`lC)Hu8^=(r>Jr9a5TO)W%$31Z5^j>b%P2_mm"44"6F`4WJNQRPdr$MN>+9J?W)q(WU!'^W''PeVt"\@;'#P34]MS:[&E:63%B0"FVc\AO:]>./o"1X0-7=gHT%)TUX&#*p\s9!0/]+B3p6Kgg/oH1cP_]'rE<96*dtWnpU<1+1LHZuQ@?;SrX66-KUmYL@Jj'^:b'(*B^\@"-P6+<oS>6BZA`3+F>@%Y+;RZ@"aDn6CfNpJZY55BfTd]C-/W:3%4WUl'ZWoMTtMJ&<VRoZ&/T6/1\_&SUh3jM$[m@8n*CG_&9[+OjulPK);b;plNQElC"\]%?RT#C/P(8l7s!,#9\uaW"Wep5"2PuIU'ZB8FNg&FY3BCpeK?:g2`aPmYT8nmi6"&b,L6EX<kG;KVJRN'M]Gq*CJ%EO33*Q@9Hlm*%P2)p7#De1p(;iJE8dXEM\pkU.79*"hk>1gT:?$.qX+X\Y9$`R0P7^iiXuTB7]n;q)2FAc093\@9`1``L%Yt^Q\Pc;_jR&Hd.BN%b%&cI&L3rM_Xo.K:'FN*U\SjTfR[e6Y:`TF8"8L[i"3Cg-oR8%I4[3uk>i<_tiHEphic)UVU6jT=n"[6-+eD^)I]S*k"?r8au[=448%Xe1$tm@"Ru6K=BbdYS1Z:_5`\B:mLi%lcWu!N#u)79:'GP>FC26H;:^6:7YhM_%\RDoEeD5^'4_&AA\kc]_OC=diX^$-<rRiGPZ.%<BeJ^DW-3bQA=lrP&Z)?Rk+Z9IUt9[GU,rG_;oW/31,@r;/Ss`)O\D$.7[p;5XRF44i:/\:A<%&"u]o3S)(N[gj1RgNHHGsKG]O:%0_c4P'^)0E#b+_J;('M\QngW1a%OW[&/'XuQHBTA#$]W;*Q/@`ai]J#DP%HBGJrhY(9ZJ38qB?/r@A,TAM8F5$J]Nk,&$Em_9l[I%+o&u[*83fg=nL1CBW>t&UAlb>4/$_SZ=oWhH5o!!S#n54I8/8;<!\TA5W7T:-MZSS$*;[+%^WI4[SPO.%9$&`8);E,3?F<6$jC%[%gQDcF!"H2\!NJ`%_">f8;T30CFMP_Q&;;9=G!.-C_^T=RaAHd1'q!),B%j&^:CN8Y;4L??*(se\1q::?l\AAmB"9`:jB'CE7jK=@%,qg-;Q9]R"ItF5<DZt<)EKF+NILu]PcH1lkK6M(95`"e+,`k3qLE5V>Mn)6[P;Q'J;X&e;_p70f4'>=eAbtbsROVNfP&h,#L1UuK%306[)IQoP5g;h7GYjuiJnb8+YHN""`]D82IF*iAZc?TPL+20&Jn_QqlIObMGnZf2Kc@<@WV66PgrfKIDles5t$)Th:T$F![N6/G.%:1mkf"7CTqCnNV].9/6%Y8N`:rMXMBS'TGA&NctA<n.ZLS4PR($O+HD=nPuDe3]1a<4m%@7'Te]%Ku,Y<HcE_=i/C_q$n/Q2GXul%"ZJGtR817]P2rNb.NoPEQKZK>-=7>*UN16QZhM)nBl#X@s.9$DnVpYONgZuW,&\8)[)=rFR'4#unoU>)8\nN(A-iMoBM`Y/Ze"f&%?&1t(W$lQYGKQD_?Od('Pe9GdAteU_DFMAeRi71*HN!MIjsR49]KSShTjWbPBk.mq>&nTeD+aV<P30lhIgo3tN="ICNe+Y.XKs'u%U7or7)M3Fg'1D,PAgWZ_9q2PjEo`S#;^k\^'XX_8L8IYa&[PKKeUC*+6/)AA1[.+.Qt6q9Eg!mSmh#n<ZOErY\dY:"3=<iW.);(&%f9=Z4!9(_pG<c2*Ff.eiKM*-s)\#l[fu4Xi>;)U&<ue+^*.qen0\RutCTJGZEZ4=G'll1I;4o;i[omHPW==4>)ak2O')3'%^:-,Z%4hPP]89$>gp9pctF?2rEZE7("'$\'c_iemLi!3E[!1Ut\6JE(4"qM)Ikk7<<[r,q!Ojfu."Zh-QYddFE\tW<j^'?`\`4#YV`XZ/3%F9\F<b0.l8kWgRJT&hpCcoqh&%PM;]Pm8K26-UJD!(Dje4lZn1HS5['cZ$/7#j((gV=B2!;@6S\bts?%1N*b9^s`<T0pJ)Dq`:9j%E"@3WU8Rld3"%&2;TrT8l=F6udt4J1]GhOpOs8IPh8PTo:lGU@BL""D;F1j)Vt_DP*3itkBEB@\<F$prLo.#4V+h@^'GT1]a:dP\%Co/>>]<LKH3Ii0ejSD!XO%3;\-s1?/C:oLofLo`5,[b4J;1cn=a@$\g.NO8rXY=L=VPjUci"46I<3ft;pCjuEA=M-(`hCjE&(2R;%.Q0'eLIj;K3P^_W(l.;-\,iY395k$d'Te`I!t915jPX(3R:8,9BbWG8Wa.jpL]o"NNc+sQ).j9egVO(M[l6g6GS;^/.Gia9al8.\%cGa*h)3V7W.8EElR"]b/,HO;/,r:jCE%P5B'Rrk79<fE.46a:J[NoXVXJ\uD'3.\n&dL+E2F4_A/SL4WSGb5%MALVr`YUSOrfC\n%;,+H/rcBa^-%hKqLn.O?AKtPQ[`(U6V*KChTPV->&:$[c)<.HgfNW@pdN/I9p[H&bqB89:&I'[%3-QqA^$alfEGuc6<2'Rr#-6EO%Q'Ziu!?fUJ+!:j;O5M-89%.lQ8U(d3L(RRT`J@LX,WbR"V.TDa;8>f.h/hW)Uom;'Dc-hkQ6N=/Zp3MpDE?7:@hg4V:/UKQ&JAha%d)k(u^e(g<2<n?NDLW845IbpR(702QQm+Y<it7%Ts'+"q+p+0*/eB7,/10%@FkOGG-tt4Q$bNURG_eC0C^-KB=DT2_Xm\'^5S]ii%l*PiKq(*rV9V1F78.`Q^N09up8Nl3rlj.@pk.$-]PiF.9@UTum*lq_6;I6GY#84lc=m$g\5ui/-+G\7[)5G4UXf]u5:b*h`(bl?)%I<Mj&5ZC32T][>/qA/]uAg3@0'FbOL+D=^fAYZ7UM]@44B2g_V^sc<sk6S1WeAt6Xpd[=C1r60SX^p*VG_!d?;.tcs\8#ZFE3hd5%LH%k=j/!k>.MDlM*pQ+OE_;u5#I!-Foci+D!8^FeF_Ni0AQ%-/4lB5Ed@4Z'",!A'V,rX[iKk8rhKK0IXAiPolj_c[b'AW#b[e!M%`F7OXjO2J^XCQbe:cVScc/V@:<k<BE+tXA@ROLTr1)BNK-H_g^qTN5O@M0Q8/&BfiSM&7UZm+NPa?f<SE8h0AVFk''L9Zf%BP=Z[%YpF\lK[_Lb!ED>AS`io9`O';@il_P3Hj_d1@#Z3Q1IEZ<YQW^+*-.,&3KW'BC9.q[g9s$'p&ug3l2GkBBgVWl.U&S!L$%_u1-s@+%o@G"(%[BfqS3;7pQ1KNO)YYa!D/,"f2Fa0PB=&/-2MV5/^jd;%Ih_YpVf%>!`2d'Pam[0bro#M1+(B9"_TFY(Z9#)4!qs.T`I5?g%-D`RWW0E(ULN%W^cqGdHrI;\X\JcPV\OFbOlmWX6UGQ[lK<(1:\KJjaMkKD]jS3-Q"?9Dc"uqcO;.Bn<eInBJ7O8MrWZsdSOqn"S%$nPl:;(/J)EN.raABp?.<l_V/0C[Uc&53MO;()]0b2,N=%don[,'rZCjW`Cpen=5HG^sZ!0j2GKCCh&r#f4;6+]b(c##,348&2W1%(g.PWFuIY9YM;+L!f:QZ\mm2@`e9Vfa"fr[S=qrh8VK3*j+/OLE+!L5AeZMgN.?3WV!dMC;LK"BC.`bfpCii\.8<:3X7T)+o"Is@%2g]TS762ITGUm'm#+/!q4eP_/fCgR<oZ>j[cFM(o7Kc7rQPfi3$*f\;;$W"ifN9,./<Vs`qh&0.b$N"%Rm\D30d*K+#Hc%iMpSRf%/S\H,*s7XLhY]okP7ZE,VJ;i#>3EMQf2b4VD[dI`lb8WAl3q*?E@CG;K@M/taWOoXJoW2+/V<'*Odj"LMh"NLM$cFm@'WEICtG/P%<2GhCZg]Ns_b&(Z%=C2=;[Dn]+_%@U:@8,nSb,`i'I]>1`?t,-H%V&*oS?qp.;B,Ee8[6&B!aG;U)p;WCa5\bM#,_L&p$%5J?*Xe%<dTb+B`b>RMh#M.gSdP5XlOX40I,<)>9p"C2@H)1>F\3H8)q_K*PcUD-p[n03?eKX:EqN)``B&d8sXggGh=B8.eOo+5&%AfPrt;5%9'$@-Y$eB3^<ujle*LKO$sLFh7Z2LQ[2h^eLEMfs0,7im\5m<M*Xr6_TW/P;D1p=K'1G53\Bdg28(8O.Xb%-UDL7X#$I0>.)itd[%@X&lh6;#JLRK,bl=+HID_:[0;/<noIS/)oO!>3A>C-d7BBbAZ>*.etWCS_).@UW-ninss@[hI$+`uu"[a@ke:paGh_C`=*^]Ul?3%JAj98?kpQfr.*;%(9]!V[7Z9>GatVjDJ8R[L.ncX6nJdb&8k6.lO\JZOJ#-PQ,EuBZF7/!2dkD8VH(kaE+iHD`-ZfsaEF'iP#mRr%H+gl6\#h%r>m.@j=`0KfP;65Aa.>Jf6,+,X*XsS.C<7e\5ds!A:Y_Hj.6+Ru4V7drS.WS0p:q>5RJ'cV8[*/ajCU$[^gNPnAj?KG%;?mg2['V\8,AWC0PiQXKPoqD4)/SrLZ8l'/g1:r_0TaI1aH!JVe;mL-7AD'"2i&S6;c'-H;ed?:P**PZfq/D3=@(Z%\Q,bR(0e90%^SV<'X>I-1.QL1#8V4KG5q81$B-@)g=NLT52bI9)P9e,L3!P[hgN;m]PcP_jLqBIAWd+Vf=NUOT:!4B0W!L7h'Hmnp5p^#2CoJk_%'iH/gY^e6='$;JNW<uUQU]MnXq&o0;:qaeB]`t!,>>W_?l[:f`8]$:jFj@N*Z'hjWohX(o?lBdh_N'Ub99ZD*"ZQ]#_/`F(Jh:q(%63S,=;*]j,?::&@"iS.%!G<ZNcuDTY)?b]eJ:/oL,pc-]@Yr-[Nm4t#DV$Es0$("i-HPn</crHaR(=3ls"]4E!ED`;%oqrGWb'T!%+X')uaTVf(VRpufjOEAs6P_8)jEGZ.b6Vn\cFU*DQOE=7'*<A,fU-IeXmW'qC:Bd4,>l]FTWol"TQ2!Jb)hp>#,>'$%$<q-R'N"h%i$pAn@_.\/@RLi7lSd:1T)-i1*[&p0L9umA(N;b:H&F-'9MG^8dt\Wh&5^_@.=pg('^[^KEbL]KN^P..Cb%\f&1[,[RP_Dr/gP%o%*`L=k85pfjBI`FP`jS64>&&D=%\<<@.["N^Udg7B26Mph8G(eD_tETKp,1GEC_#/j]n!Zf,3kt)R$`l7:;\)MC-]#]/.man\&&C1%:dLY2GX=3cLJ,Rj*[/R-[R>j1GcP49&f=k"'NBEG2N[7@h3<9pB,@3<c)iL:&XiQuCK6k#63aig>'Xb_GXXoc'Hu3+/KC)_Nt8Ab%"VHs;`5&RO&-XBbHV1IT6pM&lR2>ElZOV@eNKti<MY]1::2H^H7S,(:>herBP!`'>9`Lal5[7s"'a^.h.o38U,psM:1=2s`g-jU>%Ps9Hq>_R&1Wla]D7AF+AjB@\&L_I\f6Xfru9V5e*+H:0\8[;(;i1R3JVaa>;TbK8HXr'pZW4!'d*o;rQ*%"*b"$qll"=dksC+fKK%n5dA/2N-j_GRrM0SV1tJ'C&Q4XDT>pWmRchN"`H'6J&U"1]`"k]'@RuXd9i%=-sCs3]kbci3rA*KS\6.'"bpm2Ds3==LfV!,a>Yf%C'jEPPZ=L>MH1aY;ZR'C.HCQ;%B+"3"=/7#*L$sOj(,M2+":,hr@KT7b#%J+!/p)r6T*qdX]6qt>kc&bcdQ'YUdFmM-;IlgQs+W2%E[=ZeQ+<,No5gZB)QK`VhJ##[VSt]!%'&kaFcH<P=qJB'UsYDIb#*4WMb`qqRF'+/Ok?@Q:K5EO>>;as\S*TbSlLGQI8Ni!V4rQl%OVd4mq5%.E,S`GiIRjZY"XLXg$%a;UPYnpA\&@I,LO.'7&tfPJ%?+)/bs:X;V-_BN<,WF>n-hMe3N9=QCLE6'(mU!mAPOdR:qV\j%Z*Sn5A0fb^4]lJ%(u[p>;GASP=VC9rQV/o+U7a]/D]V_)R=m(OK%<0E[]WnuTir3H4+Z4LTY3HIo)<J6d*N\2Mu+'.R[Zm(`/BQ_%CG,JC<DOL<0TDl8&M)@/I]R4(4TX"2\o&HaR=Ve=&[.^[OYLg7L&cmP0n7S_DjL>-UGD3Z%8s"6F!OhLX"O$R.C']Qq$GS?_pelU%l$ateh8m#tMP=+%J;@O6kK;E.#E.NBK!g+?X,pKj`l`B?kYYO<[aK17:kX:[7nGg&\)KOtWZqWFcFp&W0<Z4;/QkT&Ef,IKUBK-2%f-o08PYk+Gh5aeM>(J.(,q9*')HSFm:>I%U&N%J'XP1tKRja(\.D-D->`D0@PEY+Tj8+j?lEO)4Pp.*?>XXsTk-Z+c3>du:12n$2%nMb4!dJGWid-7I)gS<h>95%_[0Gs'T=i*!aB3K>:RNdP9K$g#8NRuV@OrXFp<Q(]8HKU2Y>>I)t_s<'<%DC=&<08K(U<6A2q#CYC%C:,E\Co)aI0R7mL[O#]0mc,eA0UKiF0C%R))0n(@NhZQ9d7'gQ;Ls3kD70'i7p/;`@O;cobQ7O%j?fBTBT`a>MfbttF?j*TJBqi[%abgZo-k`a&?-'T/e&o5SU=neJQ5Br;[LdcmSQfo)ipsk$&W9Ln4JuYf$p`<YOHIAuK`qEN8TXNlUo]j_!i!C4Kan<j8Oue3b]CCf%.5fi[9,'9u.;Mn>aXYRJ$2Hl/[,S"E$@'^lWR_6IfSs3M7bf\+'3_@aTO=`=6^]-%LT#8hfs"+3i)k4kDPfla(<Q9*]=k4hWff-4%881GO5e]Q2J7-%0in"&p_'3Y@/i>Z9h.g7k]7_@nS3<ui9@7XsC@hd5(Q]-4>Zeu'PZnA5R+3BNZ'<gR<.1qN5X[\Fp%e2&3sS79%Iri+RUi.=)=tueO(_ief`(`LjN>f@_;6Z*K<7iP<]?tkJer*a8p)#XB)\*-&6"1QGLF_Rb.>7je_"gf>'4iOi.sT""(MbO(*jjL"%OgAJu*k<]PBkaLM7;&Dnkl=;$M9M:-%k[>N8f-3"F6Qhl6RUkZ.9YET;7`[DTgZDC)i85X6sLmgHRsnsm@eLTOuKb:>c)@uWpVEG%:TYU@5S/fbp1-DErLqp;!5]/E2V34YB3N_A9P(r03k2Aqh691j#uVM!fOJgP,@!*%R_jm.B+Uj]*BMQoEk2IX):d4:a&P)TN,#lg%5s&pQ22t&q9oKoM(kD9RfkWT/c:qLr@s/IZM_^A#-$mq["nqs!1a5/;Lo?:WCYTMUorI@<TTR+jP=$?kgq]$0,3*ukZ/$L6&J<U(%7mU"/go]PGPs_7ceP/=pEA:@3M/Bl>40uKS\2Mk>P@,iJ'(kekA+P'B3=?WUDAO:mOdh5K\lRiU2Kq4S]AuC_C<uA8S3gOKL[)Wr%`:^"Uct]_kQ&FDJF-]eHQDDij+t&^#3r#3.^+>E8MT23iFo5*T1sp1E#WZQ&SBnrg>hrePm28RC`ROL](]heq;kG[J/(e@cZt;09%orc9@=i:`r77YKc3@1GCd*'S<@)kN]7QPKdPXUq9>trjr9rK8qRRCrgN=L'sB4(b*W+.?+;lkAZLk9d(9M4tWYDm;Ii\XCS-?Afa%bBM@/N(^L2S]sPC1oAju#l5:/AqA3Xek8/$c'La%l>SAhC'Obc7;W19K:g<8[Hhi/egJ;joF3+/q,F7n960I\@,43co`pKrMB.9\%FK0Wm=i&$58d)+2B4S+W(E64s1T?T6<qC[.'S-n5;"$"]a^/aG;*(]oZ`o`,+sjp/mUU+0K!isaaK>l>`%F@MF&>LM$p_^38bU]E%rF#n&jFVqTd<TsM,S_'15YcCUg883DTlBb7M[p;_n`JjHnUp2aX(8GcK!`1aDT3<"Vg.+R]r2b_1FAF%/CcCB9P8)E?Y^.()W"#S%'Ebb6Up._",^5sO\SK<KK;]@0Cd^k#;nq?@6_CeVW'l3Ba6Eq>$2qqD27nIjbfRmJMe]\%M]naXTsd7Sg+eU]M%Hnb)*nNVA7.d2%+u9cN`+Fa98R,(Wl4WLdcl.1qXK[Qrp#&s#cuNkK6a/+9fISD:+PUNU9cG8"YZ$uDBXCrBW1?VRpRr%Z0qpq4ULgD-T82kM8CbM.%@rriR!:--.PT6un$.l&b`HOj\/bR3K#a_S**1*9q(?=B>V#k@0=/r(uZe#UQ8Kub9m'VW(lI&PC0Ys.28Y]@>S5[I[oLg)F!M(pp%G>Q@+(;W!s\t0:-S(8H+d/=H5;G)GLWRW"5mO.NPDN`.BmrWG^/gdfkme5#s:<U%BBTsXV8AOnP?8%mS07$JK&t:Tl3c!ZV<QD,g%n9S>[U),0h3/KMFc<88ZVroEZXNE^rR@]_aIZibQP,u0H"d(CUZ5?nW5UBH`D,X$B8biVC39Sc7OWs+\'I>(#r$5@iiaN*mFVtc,%(TMa+j\Q'lR@S?dKc\?`F"sg<;EqoD$"pal6gr&ai/VV49n;p%>/q1`Op\')VXfD*3#)QFJsr(@[%5-O<l'g=g*/L&BU"ZdR=abL%6Xh4jX'`2Eek*H\2pJ'j2;7,7*/`)el0Wi-SO>3laRb)^"P'd9/]T!lhB@nBBDb)%gSZAM/5BUki^C"OK(Rb;E"]6hNRUi<TO+U+%9"tJN+N;]h'J`X&96,f=a`=*)'/o5WId<g4gd4GT3-*?"SO@I'/(0qurn;(02_ruNVU8.B`K6UaZ=U-YDKd5m`7s&#I[a*N'&.$q%jm\/+YRk9)UbLfZk9Hfd+2i(d#D*`aVZ:e@BLKX6+G>hX7W(GrC1(,SO\<6aX^:[kRLEW<fL91I0UZ5;`2U!IHL30m$Nd'=<FQ(e%Lq"i0K0JaC!<=G9k"02CKn/?1Ld7AP8;IV\FCQW>3H+sCTAbe6X]@/XU44/B<\%o]jJGIW:@j!haGn+`3ssVt-oGFAr,`hr.NMVS%!M^++e#BPm6mjCc!]3GRTqdp,2mh*:ij</X\Oa7J@@#:9:3YA:[5oj!YQI4mG&Zqg-fD`tWq/c-YC[Q'\59D.qb-$s63.g%-A95!%W]8l;.ZA0P-3+i-#*TM2-ogHp!%`n)M<<fD$$pX0_\h\f4FGRBNN>4m,q5agA$lc5=uoG0l;!+fjD49SGiE?^TFOVqF":'[7Ktl+%f%P],qf^%V&2Dm<:m\to$1gJ(8Nd`<"-$&Lh08/>=REmn!&Z9mo$c>NUor<Q;2_g^-b6bt20KZ^Yu"]*"a>CBK#q!m>^041#diN1%V'"ZsaLSTP"hKaC4uH%q$+@-q^Snr-cGjsKgegO(XS!7'3(h.+"4`PcfWiE,MQo?\7'\Y?E%rJ8T%*)/-k9@-gI=:@damDAEkXQ3%\MXu10M+$BCFb/A=--6#XHR<@og>CT&g]5hISGU*ju;[96%pH8R:;@+rsl09$:/fYlJ`U5I-X,8cE\!L2]ld&ND5LNfXdgA&&]Si%NIqteB%0T7P$qLor7`FDLj0$/-j?_d7(l0j_B^a[e4Ic\DD6joiK%_ZaX4EW_40A]Q4*?6e1T4EZWV;^Ms8o='CN7Y7RV<8b9_hC%C9r;[L&e9aXuPX3"Ao/O6ktkl:j$ucOZAr*)0&f2Dcn>b0LN%qFh-=d&ENYRb$COVV3:=@&M$etMAHerZmDs*&m61q-J5"G[tpW`%lB3`t#sm*%/5lC_0>3WT\,qeQ?GhlCPULAh8t$A]C&IWf25q-TUN!`>Jjbt65Rg&L&GBOZl"u%\T890"Uc!fcV0&j"20/6D&;4^G%FPeT=Ah/d5+r@aSEcYeqN=qI@!d/'T+=^J`$'nVbm!/*Q'_Op.<21RG]@Mq5DjeS`@0!te#OGn">l:*N4K]@+&P?W_CcXi_\:5Co%ag@3K"\Gp,DM!D-Zo"ia&M]TI(AIY*i.T;%1qJm$HF96n>#J`X)0eGJ/1mU#]bFXd"9Yb-g!6ol"Nn>N6'_Pj>6X(.R=lOg8m3!%%P,'HC/\st=I&CXWnLF:UPbb5s,VjGO)mj`dF).]VQW._QIrmK4[9D5+p-`<?ib(f:'r)/o'Bf&`YjM!5eo4'b@G)^pI;DO0YFu>$%K#Rran\9m7GP>X'EC&A-93/!>$e)g)C>VpsB8-1Af!X<a14ELD?`lg@`Ob]eF.&^@+K'`d?!`Q-31W3Y%sW?u'"55pb0eii\*tcQ%rJD&=i\sE4]U2'!eUcD2jk]lCmGi;nk>O!)gIC+3!-u5_S`pHXA%aX`WZ,\mC2u+fc8"0^gb)V2&CKDS7Qe'>=BMh8#Os_Z^-]]M%D1$3hn\HFEoO-NEBe`BMAR'(0\$,uQ=9CJEH'0##hDX,3!g\:8hB$DWO7L1[212VO=@9QEm!%,-K.0F6epZKMr97OKZVmNm6'u2#%H'hhX(?J3jjkq8mE)UY;0s.^l/7\aWJZWUG40?VC9H<hLr^O"i\HC*FZ[cRn]c2d6A'm.KhN<%PEY)(>cKR+,p803a`5i_Mb7pd#%qAdD'&CV2"#DAI.o/Ip>[E4X6+h`$,,=:*';]$(oZ0)=EE(D2t5mN&GPXM:F.O<3G`Y8qA+D#bSVtXHnr>TpsLMhe+=K1jQA_0"G%DSReJOmbSJ1pG?e]Wa$?n"JM>,)LtF=34D=0!;I!H9jY\V6Diu#o)8ImiY>Ni`B?p`_p-%Ui[j?Id_A@>'QJ#r6!9IM2gH'].$Jp%5Y444J0c>+OH955W.h)SWjUk"Bl!rI21fFi$BjoI4kDg#>k>`Ao2Q_Uh$%OmH6TS/Tj&N8_%YrF<MTK!aMg%o19G:mRamKIiGhk%%V9u$Dn8eCOK8nZt:-d;2c4[!!\CE?+,tltE>1%jSi?T^5(+8Xce2ZqqjsY6nN\nt*B6"fH991OjUNgc5mTDKPV%>(\/oiR>+sXf2%m0nIM?V@n7>_W,Jm2+cV#]Gl'\=d6c15ZStL1h0B07d)]%l-]kJ2oEH&]2Z?2Tq"<e.5qe-$Z53N?@gF;)iYKF&%OAM<A"pi(VPK%!6]6!"AX"%Ag.ToQ]tl#+o<S>:/\HfK<82VPLN/2KN*`^_Xrjc@51D8Y:PsF)a6kEG#-).[1#O!TK,aK+g>Ra--AUGE^O3"H[EKi%0!]db3;?B3"51p3'*uY>.L=#eaaU.bB`Z6u@#`q`g\P'F3`b'?a#XC7D3`^JY!HK(OeV>OMFInKZJu5C1;Zs>3i*.bG#7aiGF7D7%2jS^s)+]<ER_Dk>NI;!I$4]@r6k.SR&f9DI8S_Vi?<9Ip"NU">M+N:c`5BBmSSM35Zc$Oi5RpG/ZU\JVK\2_3PVK"cjlBFgN"Ycl%0]Diq@mQE)*EQL&jfuM.4O&4lZA1_r`JQ0&OO>nt][WN!#b=We9.^Fh$Mu1V(aT<G"t[`j3!:89$j%fQ=&"T_;"bg/cBj"+gU6Aa%!>ZtTc,8Z[=\pXG!:J[dUs-#%CP7O!!kBJ]E-Vms@,u>`GLC'Q1.@&:"^AdT7P-bW=imJ&[d58KQKDaukZZjm-nmO@@$<bqE%rbn%9i_bh`Ql8N".RUU^NInI*6JON^kUt'jC:HRHQN^.H+=9Tj5\Ou1i2"hSqPA#^qCMng`Au(Ugq$6K5o;IBZbK'COPFlinEg+Ma\gq%,j0MVjZRGQ5mH,3p!+."nnrlM8K(d'KN+kDQa\6_mdlY--_0.F]%m-gn.4ndQ"r6\T:`k7&!;]a!Ec16O,6bQ,a4o9\aN>0'+1@s%iF^D_a*Z/!1(&)BPT3oQ#cQ9LH9<2KiGMI0s7ebaA&*^s4A_]/E#gT,U'od^H6=-?NN.t0Z4uK5"-ld58k[ElS[e*JM;#4i(pa1U%diH^e2.e4Jr$F6D'NI0gC1!ut.&>h01c#M/P&-^<i^,WBA5Q;S3S]/-*GFC8K$$faEas'.g/R]4##9DJ1/VXq'EMis<PITsajr7g%)4UascN0+hi3?HK$2$>#R2(Z:9mK<@s+GMb/]r[3fV,E]!6<Z`1^5`&n>qQt]n;+N1u)1o^]62uH!q$1b:Bo1969),72Z8/$;Jkd%Jju1aHW=ZFl%kd,25(Eb!G-U4OQ,AP1'qA4E0BiU68+sL%+P,-Ua=(cb6/6PNPsa_8$E%TjHkFDat_9,#[5[J*:+tk7!_9+Qrq^H%!&8Ya4Phe^p$^u>B"uuoO)%c],,Z3'](gR:Z04paZNW((""b+E<1RS/-ti;DV!o:!7,JnuTY+RrX'iW<\.8uWW0)<5N<\2gKmO9H%(LW,G[7CGdA_I.3R'r]j"PSZCUM.Lta_Vlf`-@fRne/Y&13$QRi).D)enTQ!@T'a"A_"BV4rkM0/%!Ga'd1.W@C?ZUc7+DCiu&2U%j@h@kKA%26'm[%G;Jq.60eeKZiR*$7P_:YC#5$QT]`J1d]i4M\HY.i2d+V6s"-0!`+Kg#90Wq.UEZSoKidl!h<a&UXp%$O=bp#Sa%W!/1P7)>@tdHT5(mb)>c%tTVV)\M2d<4"3M!G<]lB[EOpJP8nM9hB+Cmf8p#]`Sa2@J`Ag4u;G3b<X1]Q3#V>@)aOu)B?^TY_ej;%-fl[K9#VmO:o4I?93pk<QY'A7O"1<B;UnTR_&8VZJoXG_ej2V->1m.AOQF_2h(LCsH?j)uP"CoUqER3^I-crQK'0!@>/GleU[ZW(%!TB?dNg!T20$S)s>KP-$TN%j8TOb&Y0VB_Y7W0:MN&U"3_nA)OX'W6S5UBY=@a2F,J:MX.To^j96,Me&"3U)=W4g!6']'Y1MeK0S%88ao`Ze&F)-5"J;[]R)96:k<JPD(;b0<Il38gU's0DVBIYdRrml!8HN*__?A;56rREbaT#G"F@^j3>rZF==bg6%1C%c89jY9^qTb%E#Mfj?slY`gI;H#(KTppaR<N(`"1"B4#Dn+\$"oB[\ddqBE]`YdqFLC@.0$R?8c>U;>Eccp]4As%Na+;0NgssC-_FF]#78kel>Lo%R]/$Q"?s3SOu+pt/@i`_LJ$Ec[B:[3Rs>\J97S@j[GDbQ3(JnM*5RkAX_[.@@AsN+5SY4Dfi)S4KNco?[#dDkq-oSG1jP]):k`26%eN;Zn>oM?uW!.!!`?_ON->21D1Y.\_GY]8)AWS+(D:"-#Y$f]*[&!n8/'V$N*.6i'":T$!4ce'^2[OAQFNURF/q7:t(_6WQqo7eb%Hq>ALK?(^":_XJ>(;:?Q;4^BuCsR=(mKN$#_Xf'!!9ZFn^!%$K@i'VLT<OR>IA-8_giDtk8:_[KU2Y+\eO,;XG[<Q@P6Sa_oYTa%%4cHGu\HQ*46/\jAS.$;FW+$kM/^@YaTWMSN\s:b[C"XQ"D"#hVSE2`i*V.\Sg.lZqJN/hXDad"*"Tp.bdI)6fDhT*DoKH8o@0i/%%NaUk07*\%(TGF2#3aug$F^Q?T0T,L6*+R)U$nLUkF:HmrA9-Bi@nT;_4dft(FA8s("NnM[3$]6jA2Z(jK=Qf7pfn4IF'0,;UluL%%hddocP)%'YNSRm<ec/Mt*PeG0^.TQL>mXWuSM2a-ECQTVg`gIIkTEVdQUatcG(>$V,FF\nH?hGWRlF-R,fuNsh_%lUJ2lm*';X*O%k;cC9K_-GP\GWi=,:'M6*P\$bb!8^6@UOQ<AUW@l1'e*MamG1o_*DSMm>;2OMI021%:>=U29>Us`,",O[gna0nGN0a]'uGJrcMU@%p^U=HDQEamPXOP7dFLblP)%1fhmT,@lscWf=o0_R?="JMQuDh@&.XF0ZYFgoibB5kTH\XmVCt=IRmu4TVX5)""=R[D^]qUT,)Y`l%X[aB7EDXk!%!;tZ`GDb:7GKN25a=\OfG'S`e9IF?$M:-h'qKrRl7ie8Um%>rgI2DCD$#lP(oSE"O<G&\>ds]QVJ5@hK4>Q<V"tQG%Htl14c75o^(T4GT7#iO8RB^M@5g4A'U(Da9[Ob\ia+@'LUddj1TbnRMYQ1pn/R<W,BPhCD=>`g*7^#+KcRe<g"L-T9YcB6F44'3V%Sl[f]r^#e_W@I/Z2_124@Lti1^3Wp9_/+#)-ru'J79]u$%q*M!P7F=IPth+5CTq,O)Q_VFCRSC]de%m\hA@BEBkTXQ7gbaT;-OTh%^pPXk[YilB;[3hi;Ah\FdcC[TDBCboKSQF,'i\e1:>8W!PgAegiIC1jJklT+&L8KfPL$8ZBH_;crreIjV(XRU5tC+>9EiGcg,=S:%7Rg't"\S)'\$dUU[Scuc/3kbh^j:97FN%L![cJX%%kFNbMo`#a'D@(1AIi6YH,=P7't8-=3_YsWTlknWN)WajePa[0LH^LbC^,V7%4>o!p`$OI:.0C@?MW(l<G2\_1W<(PVc1;J8?VPs(int3hN*h=[LD+t67amFY!Se)*0&^>Ln)>Pff?:4Hj[t^3P;uBuPeRSp(QL]6%1dMr43FJ=pY>TU6K\?Jf^D/h`;j%hW@>CQ/(%n"7/;@R5GTPD\W$m]JL!Y;t$O%;@(%;rm`O:*6>>=1B)2[b%,2l1,h\m\#JAHO9%fktH&>^C-M[@e,Y35>@i,h7od:22;S:(,pt'4"$+H?iMF1Fu69eCcu\6.p:?coE)m6-04@C6.^6G.Ed+h'="n13.[[->P%61ntk`%0ehY?O1;T__.mZo?&<ZDjbs2Q6O-HjK,'1U!4Is8_r877BdQg:>RP9s$fVn<-\tsl!X_7KO@ofF!fMhedOc!'ES@)=hpU!UgZhDf%>CuP-_K6f#lCN(`+G/9L%!D&Gil!_$aiL5[-:iXO*MLOU'B&u5n>-,d^^q6ZKrtQ7Q>HS8*H\M(/\"jb\SL"I!bRQZ!Gp&ud_)k^%/&uA7"Ed7H2bGo_WN/B)\&7.$:N9fc!N+9ZA*nB$bAkqG!7hu%mJtD?AoKB(_0UB@[M!m72_=M7;cGn$?=+>PUPATL:si<A;BmVA%;Mo=6rs&A4>lqdl>=9m64lsBjH7:q.'0NWjo<cRl'?r_FH/Mps7JP;GbpK>5i]q%egk5^\*AL^W!4;6\9F5R*_2bC"4C4Vk>$Q35%3.T%LOO6jPD%V]_C+]m=;K+F6`HEn\Bo;?X!j%a?7@)?k(!Msg"=Y;lb8='-O<uoSV?@S@4>aHW_Y'j\*0'u77D7n7D3RsBYa/3:%)0[&U0R@!9X]pI0X^r;e;QI^'Rmi*Z/Z;F/;B(2<K?F/d7N!bU?j[c8Y(#oMedN9%,b5!P"(6Y8fk$h.1i.dcLCk)_YK6.c'ZV(.%.R6hbZXD=dQLMXq>SUC/\VSR"N`!0$fSY)%E-4`soC[hCU4eW$,u0WQ?V3CI/F'@&12;gbq>[:LjfCpCSZJ5(8p!NgG"B:KKu"Zr%:.E\eJ>^@%`B`Iq(8gj"dd'hi44'_NbT/8.(Fked.!Bg^JHX^%e(C^$[3CIZ6CF-l:nM^YlSsJUn>@FiH"R<3b6uel3)-_(U<PY%%.p(.,=%Yr!8%,59/Y9=:VC$ZPJjN`Fo8G(Z:Z.V56&7mhJPt3\JQe$_94iV<5\b>+N7+Ej19[Hi*0_GD&]!NFV9qmq9q%K)3q0ed%EV-h7`du1UD`??'3$D..Zl7'B!??):T`\$ak?$?n!I/jM_5@b]6Xjj%i[V$r([#3:R[TYsa@0[mIDnOeSYRSB].kX#5^N2kWi4\s%HIu>Xh32(4%R^p2:5DJn82:;DI\>F2cXfML6a):pJuO8jJ=n.l@L$(rjtW%h0([4'_l>(I!gp'h2]CV.%:iHV1(jimHkcc<a^'r9%'_.$TRLftIJQ3B[eT4,.m'\UrjB%8?Y[1Y++Te[3P;u_bi_*7oRR<nkEF'A;W.l`XRVl_@O.sQ$2CSZCi#eL^"0,<S"0si>3m\ue%b+""YNJ.sq8ZJp%!(6.^*$23VEZId8LeSb(Z]r:6'I;13DL%@rR5BL]bo)-C)<Vl(R,&S^2M.F[-8])0'0#pM,-7-_Ah\^KTT9j5%DoNJ#A!l?V:#SmP@iA<gj".#50o8'Aco5$Zd2Sr"(/,t/geq?[eA!HW<Ajs"ehjdr5RgcPf=0\Q(22o@1JQ:46ig/+n5E2h,$j`e%cJH*m\"2!-Ag`QNh$"!&IVb`p*Q6O;LDgG[EG_UcrL,CTH?if)R[6>\1J9cI>u8)3PhSV5/^[6hMC_bS/W,9]]uR)6>'<>-2J&.8%iTO(95!T8h>A-X[HIl,r]g\WfGTTr8c5A6MauA;i"u$46S">(Be/&g']kA=:DXc:nQ-JH5/D9qimfCL-iBD%V_Vncd[):?5Ya890%f7cg'"O8Ca\/LaWM)6lCeXKV5?hff1X^MYq[!63p#'UAOl-fc>!-0q&RZq5^h*P$:1)J@1MDE[S"WF[<r=7T`>?Vh_N`Wn^ID,p%%m&c3VoQ5:P8lpjf*1YMhdOX5%rCJ05B*Xbj:q?6JiFSg-]KDR6Prs"M19fSF`b^T?lQU6GQs-fA:<l*tC^Ddt;RG]QnrWTXBDRKo%BM'?_45b[YpiVSNp1Wr[gY":;85D,W^=&)6JB4pD])9]LA=H#J"6U(ddP-!1b"dV=$f#)aqgb/k(g,-%P^@HDm`UOZ=ra&R^>p'A%1uq__'\='B/9O+qRM.M]C6(Yq%N@XOW2C]RH]g9&PALB(f-&`W5t:`bi"#1uQ!'(:?OG1.rjrun%kngL'2bk:s%ch+TSWD7J3/St%a3+i?oL\ml>+$PYAfttHfj*kW@@GC]=g]ip[j@/*52X&IkLn,;p\d5Y6LIQNYV=9q8IPV9qqtj*0djA8P<[O3RtrHp"h$+9"=GGd%>B6%.-BJen7a^BGW&l^C3Q7`?E/#r]8VDg@OW[6;%!bj1PI;K:doBh-6T")Q=u(f!!KPP'V1b3q:K(FK,3DuJ,:s3B6bDP,etMVN%9;`:p`+sO;!s@c\JNL'Q33qE66Nk5SAn]J1+W$bJfea/e'd]H;@;VGh,`)Q^)"q/EbY=O883i$RTaO0u\)5Y$Op#s;%Q+#AiNcDa%RKE,c$EV%-&mA&d@YIgB\35i7V&m;u#t0XQoe-i"B!@Vtm3"!49HG?&pna9/6GdFQ\@g[nb:DPV4=J'3dcglK@!,od#DflsDdd5.%41k($M_RmIXZgm%M]Yjf"8HsBVX&32Qr1%d]a*5i<;d?+`),YgV(2l9]-06NLUF/?96^"De2Cem!,C\0\H/O[?D)g@IH#^265eo`%s"h.=-tB<q7+\VVm>Sm#945H3A6-DiC3_Au_O#rQFAjj-U%^`K:#22l0JMp]9C7U69;cd@4?Lslbj$'1UHpbX'SM.Fh+?p:92J'h%&cu:P8GToD#F+>*b,HCT.hY`5YG)j1QsS#m)n>/=W#*-Z%nA=(gb72FjBH38[WGr?BK8G`AUO<b&I:i4+eFUjb[s7E/SW-'`K$TZ%]I9=uF'Q!Ki`TQm)'r08fSE`C41GV>-kieTaF3AWDcu*`Y;asPHD$>jOg0TfVd3POn-mo4C#/:k/&%s%E5Z*+VeAc9\>K-Z,unSo%>GiI!TD(t03DAhWVhX[NSme0>Y@b+noiOX9c,]3RTFNg>=/ke9R:qGOs5>W:hjLWa].BO'qN*Gu@L#Rqd\W770<I]*8FO0bb'd1T%)aKu-(Rp\YT0qA-nL/ebkTo8UD,I$<TYnGK*LtZnEN8u;>D9jjk1=W+7$tki]9YlndO@2cVOaWu,+f6qlCFDD`gF^V\UOeWD-;O2%"tj.,/?RriY%Q0E2[9I$\^Beh);PCUi><V@*lObk(NV8Fa4>#U"sCm7kf$bJ+f\e3)d4$?#k]1;,#mGQZh@n29f>MarM+[c&;<72%2=b&n;;<bRPn!*f;o,<"J00AWq0=I=0DA40fDW[VlSR?MJ-A/@2O3_n'&/(:&"ZIqQ$bJ2j@JC5`@%-8``VZ6RO"t]%]h-sUP98U%bF8'$:p(ibG6fO#,B'OEJJ9ES4TN!l:j'!?'!Nf/<H(;ObgI+pW;n,H#r5N(ifHt#?j+(A[FKqrq<d8j705MICboG8,*I@d(''V]%o1ES'iNNJ88ejk%"WQ\%)Z!=-ruib_02)Vs8df[1Or9Vl+Fh95_WD#@]nA4Kda)2a[6h5X(.PL$6UMKV*JGH*3jpTNeeZl[1/Maj%<h,&n:_NbXC>*nZ+ELJ<`VOb#8oEbJM-Q%15&RkrL'j9INDdRoe2oia@,kM`%QZS,0CEod7KB@%&=ccH/lER(7`OJmN>e1FPi<XS%N%NW_\=m[V9KSFbXj69';1jD)]bBbo6X.^\.<YsV4d?U(BPaSX3:_;i_9E%UjtX?bbm#G8%Ti9B4C2W_]4Y<i)I]=8,,hMmq;g$^%n,Z(r#3+_'.r3p"FOi'*(_c")"qjhF=<U4,AG-DfcHqoV`,rH"W2=#ndI&OnQd(=\W6ekMY)-*\^^,0m*K9N+eU1dO,R@c]AjdVS%61PM%(cspKJZ/Wf.jHoC#[N)Rb=L>'&%Y*H[%t,'aX6.=pEON@lH#*4&e)u\>4A;>[l[tl-_.4u8`[lOcjsPmUdTI<-.GRr$o*J#%>rT%EY=-Pf8SMW6H!m&a)a4biXV-9_r.cogasbXgqTCY7<gqiqNSoJ/D?ajhq)7%@3++;D8SeoI"NL+pNj%04E>>Sl1Fs"V,GL#D%m!-6g`l6ck;5^_a5)OA#B=bADQ.9Hf\0'eA*inHrXe/`Fb5;7D4asulVc9#EEICajph'5-);\#1Crrf#!"4krP`)');GhVIKpc^E%-=!E:1'K;p14!@??#_E>Jb%&kHC7f'*U9APYZ=b`F_s<jE;M/N4kH]_*^q5cP*;-:VpaP?"_`Cq[\G,<>n.,h/NURtb&C)Xmp_j>%B%Fe<X4`Fg*lM%T*b.k^V8tW*]+^0eDF8>/$8@@h.-Pni6)5\6'c6gI?*f$[jRY;[c+EiJ@,;"Gj$Jk]p%bGa>QCASo&Lb'QcFT'%n7'tN'CQ=?Q$[Y.)HSqCd32.#n\le?^O(kj4\$q1OnhU/OhnBE27XtqC/o*.V?CldT\DUR";O!M6JO]$9\L)1/Y$LVhash34>P\;%'oS<:'u,Y@^Gdk6GooBi^DkSsa,"oQkT>j!4H.8:ZGV74]r>97`r5Yk2]Vn1ou2D\dH4T"g'kfn<Qq2,hPI6l4lH-]YZ&7/;HZ1`%U>_Pll@9au/Q=G8\,A-3h$-NeocgsD&:O+kZ+j5N<iEpXSf7?0<+o4`=gq$8IWY<Y%K)]1DFaGNo^Yl0=H,9\_3tT56R?)SE?BG'%=FB^Bm";&P?9)s&+;dknrGh;R$/KlZJlmClWYAP?piH_s).F2Mlk5]SDoe0f#LXMsGn7Euo!d#5s6]HDdggegMSDD`qr%2Gl!BG>%7:3FhD%d("%E*&?di!E0Z@qOrGF##].f:t&=WGHp?f@GMile$saD;(MkmTZr8^-0L]alY67cPe<):'L/?hrI?-2]*DK!.[V9,m\-%...orL)StM5+R7K:k2=/!=taVHZ;JBol<A-heC\6(m'<hkCH>9O59tVci5,q13`/f+GiH@"isS:[`oRpA]/+Oeq9Wi#:K>RQm0[!%]:X+A';e'!)II'U[g"*W6mSCe#U:<BX]G6sE8b<#)q4pARG@stSOjqPhZ=oDf6h4F]5-1p(,cJ'<b4-I3S_%a0`p&SU:$3G.hX/c%^Y5Kb*NU7HN?8j%FI7g%CJDcWM<hYi![Rh#bn):+ZZ?7iS[E)$*Y;H-V2bWZP8';:`KZW;aG\t:!kE3C'SYlZAG8rhida9#(+O2,%JPu=hbRd<,^hVf_5$%A,U[O=Sas]nE_dr%Y=i4cJ_qp3kj<a5?#EsODA-d6MP(Q1R^NWB"/L_j^>td"5`a)9d%Ss$0#Y\-TPt1a0%0M2#SqW)g>8_8gar<<^tW?pg>\D5-J]u8Qlc?F=siNSdj$A[Hm:cR@W!t+pC*`1L5o*g>$2pY=QGB6.1\=4EEa5,NI38`$kKu8@W%-li!Q5$j76<l@L%s7ag7s*JD,rt0H%`U]_nofuG3;9A2s8UJrAUXB>86NY\"NF]ToEM#_5\o;:=P-!K;&I.[P#hfar*0EQG&jqs_%8\6gRi-cNk+N?F$KP:*o,bT2:S4:kK7O'KaBFcu8O[emHX'hgdnJ?1nM_iYRL)@_(1GJ2aY2aaflf9,Vd)kCt*F!&0;hn\FE'IIQ%Zp<^1<@4A)^b-G'GcC/kRRV[X%i8Pl[_?A!38\33N5YRMFCDPn5$nPki%2"&a<g<.WU5l'^22:3oo:GRQ%ZLPjML)6i_gb6!S-[A%3n*b:)N?P7gC5Tb5&7NsQ9h@_%B0HJH\P9s^*niD1d]^AA0d2uN2nico3<nnI_r?I@`;%i$qe3*[L6Sr$K=[]F?9S^F=/eIe#Oad%S^%Dq[F2K`lm(ht>]lYuYoN"#*4mb=A'8o!LH[V?QoDNaKX7T[lrt<lQ-1)Tg4`UcE\2^R"Go:nV9`1LBD#:t^<o?Nj;^p`;7`hP%h+sJ._Dp"uhks(=GPU='T-)nE4Zd$.SR5Zoh>FSTU4PQ<<!K?tos<330CE`'0AiipIJWSL]mb=umFC#12>q@aO1!q2eUPK%C?4jY%<t-AR\SW3\i7)oOhn#7UJMLAa+qScHDCM@QA"LkC[)NHn8P3;-iA2aWD,Y-cP.Kn*XpQQ-/RIL<L"Gb3a-lR=LR]qo7[;kI>FlU;%HQD_m:]kniE]'rBOt*Y`Y8314'0),sZ2<2Nro4Dnp*Fb>2"-/:,r(8_dj&V8'tsaI'i*p"7R&(0Kkd2u&-uKFKu?h,QlOOL9/1e8%qN4L/'&Z&RkW[F^5)M=k5MS`a,"#?=Nat8CVD<Ztk@!EW%OZp8K_.bf(X=P,j&dS8AQ#%N`c=UuRETm,i5Rfso&qL?0b&&_(tGm!%\K5l.Wo9&Am4UkJG![t0d$=aukA=pk8%sj!JQY$gHB>Mh&.Ea#:@&9J@oJGHM2"b3Dj%Zbh[`tpk@<T\<+S6F2#V!GK%>%Z(7I":%l^2Mk(g!AiFM:Q^McbO\J,Suhjmu+6GEq<_4:s8GmeFW7T<AKgI_L57^OPk?Dk$FU_5Bf,Y?l'Hh"U+"Zcf[6S"%qe2m5/!T0<,*%8j5@$gMY?pgmh[MGeVaphd'N)5@;C[p"enDHZlmpI%fe;X!b<5Z+ZRhJT'D9D3ru&Rp'RL>u:F;(X*r)p[l^9/@?#<rnFK_Q`hLs%S@eQD'dcTjm9cr?V.TZi]6^g[mcJ?ae*YeF]@^tH;I?moh44H5:k,BUYCCijp<DcPMu26lVdH'g?TusUG>WYKg!?i[2`JK6eF^AF%cS'e%f$Ed0DAmsR;jJ0/X<dZ&XSpa`2a;.sL5$(Q^,rs`gh^:)?.<:frNpkFJYS^(X.P`IE#6FIcfuQr71VR;J7#J6)n?@4Ba[Y-%?+kYdVgj#A\S2G^gNmKHVe9pd2V\*IpNGG#?#Nc9J$qCS]7.1m5OttlO/<FOmCSM[TZ_K$Wlic^^RP"jQ/h;+TmkX`/`+/"=/T&0%pJj5HgHJ]RheVV,_Y$_#hb;MA:TH&82S[;%#A,4%ju:_Hl/1qil-?^3`V$?1?<FTD](PT;H>PkbjL)$^F0>NZrr5,nq_:%G&j)bm%O8')7:ZZQeqnPF'iBL(003RkZV[D@eRoL7/R15PWkD*R=Sl#i1>o72AUXYtT\K\YFAK2Eqo-4dJ1Z!iE%7i=Vh:`$TYgX#A1;)0+%LdsUWo]0/lVjiZJ#C%=ojV[lC7U"-;-%o$7N)JLYhj[d$G0IL`P\hPrQ\*SaK(9&AHg0P)D%kcM,1`0BVsV@>UYYb#mJQ@&'Z,Uk%`thhJ>GhF/ZOoK2Bc^]<cg8q-I6Kd0o+4j4dUP4Is7]<HV3Zfq)+"3,g0G_2U;EX8e,1raEF8'D8qcslF.FnLRIc-3Z%YC<-Un#7%W%s/>>`-MJ22u$oE6\hii5Fs(''S4`3$UN.!C7kV']RTPf:an,-hpOb+TD*S-tmVQWl+06g.VkZCd[D0!DWOQd.6[:B@@o`NUZfS%(s:>0R\QUF$Z,<@QGUqOrFBApr$RQ8NdQ^`8V_coY2er]h877^0(jAjo9=toSgYBaHu>-h.'+%A]?A5:o1[Wg+1D,Qa(ocJo[=!Q%'-hmS.Had=O<U=HZhhYs0AFb=_<:iEH1gbTs0;F[i7%^N[e\nKmIos45H?"n]@a4an_j!Tk82b)%@VB;*<l:^6T`tlhq+etoDSF8%#G8?D[JHeRe`ZV5od:9ScDV9Bd5aBTgMSK]GnA;/*>k&[55gO\l_h4WKZKH_B2d]7Ha!l@GeP6]o',]ES5s"KJ)Ak-s8"sXiFB4o%ERf3A_=ORAO;Q0E=b5$_S.Y.838au_ZIEKLO'_a)n`jj^h>BJEXrZm0n*+)tqWqtqp0r)gp[%87N9o6mRn_S.n!LOJs7`]ms*XKc%,BiMTnQOZWL@2f`CbKRV-hQf3d[4.JQTq\Mm9=F(<hFkAh`:T/NeC()o^f*_S1T`Y@WQbe\dnYI&&<SF!8a:&S=`f<nAXPXp5^n`%s6X=kn&3(-oeu+XcaU)r2X4Dt-/5,%A_&g'YMS-`5hQAe&'X5-`U+O_7G8CSbmXF*;jrc7Sp>^NTDlTl[sq\u]tM%hpnrHW%qE'J%]utpdln8TnnAW$6RpMr/gHXuaBFb(;532Ki<3X&>s$ToRa7+1rFh.>.Ta7E#fT0Z(FW:=J-h,dD?CbH;Y+M1JhYbArr16mW.sSlP%H*b.2P3-i#rScr>D("9/p3ci=MrTjGo&As%c$JuG*!(Q13UP2kUI0ElbTW7or;><og%LIoktCC2QU`F`W0#BuLRZOA9=+G6F8k=B%a5p37W&!WPs'SdBkkF95oD.^a+!7&>gi]"-+)G+Aq#+@/]"4rjiT]K[]5MT4X*4:%"RF?^H?Jo$RG%QBrZGij4du?\5AEF>H1R.&%5M.'F.o$bdg!Nl4p!)7'laM)=DpN=i2E0h!`E&\_\!u-QmFr\6B>X#'Y;`pT54ZVpJj9+SQk`)p3j5[2mP_,G!j_kVNJ$oBV0PY3%s0J3,=''#nY?1%jmFBJ(Y&5BP52,SPc"?S:&:V3l'(f1pnsc,L\(=5us7,dEp%d@#@2f/+:a(&0/3[&rI='5Qn@Qs,k%=;aAokSp%>BQ)$d6YM#47W'7bmBq)^UlM<]Y-M0<3Z@u%fZD!lLt.j2LBKsX(ua7edjFjDMKo<WZ3#H+-l(]I^J3ejBY[%F1%uB+^kkaYKm`'%7XMR,^YN=[\(=]*40:-\DLYR<D$Stkg$@7L_N2E7*PK.uC*^?8c[!ac@A"?Ad@5?LeT[LthlXV?I=?D6l?mr-pIcHmp:3s7Ve;?7%hO_F6XI`d)K=XaP,+*TZ%ih3I^,rrTd7-2ibe'RS7i468Ck&uX?e;Ciip:d]KJ(_G-;3nh,O5*Tq;pGAS*bE$h[6,+1%`rX=1@AB%5C[EiRJ=<*=,+k()X#th"5?X#9Cr)FgE!)=Fc-R)NOOrd\9rIKHbDT>Kjl9K4=NuTc5Gp-i-0\JG.Y;QT3<?>I0h-=hYluheb.>7%k3T&+p"dn:npGM"HbJAKr`"*l?b^@]$,uJBV4L^PZn6dFK_FJ4IB!q.X0_3Hja)D(c5rr)B7#*<=l!)@HG>cT*7pk\j&6U$VaEO"%V4Wd^3dJ?nJt-/u=k"1cTC,YMf_]uAIU+l4)=IK1\,;`lN5!/P-GPJ%J%hqplK[r4#;P\]d9gDP>eSnI>a$TW4$;<Mqse:14g$9a%?/N*b/.Dn:hmTj6QY[^VppBF+GONK6eU7fd98.)HHT]tf?/;l3hqK;5qrWYUDDsTq)l[NMrM09hkG@q5T*;XgZZTbDO,gSCh?QXr%J"Z$cJpd"u^87\+o'^csNd.3K%<pCq&Tj!gS*h//ja)+]\"L2oY<-aqo)/2dq"9QW.Vq6F'T_2Oa2jCO_gloWGd0He6B=][l)=?%%PmuPp6Wno"4ADT"H$4I^qd\I4h!F"i%d`YbbL`5uT:FforlR`;Ct;[S9#s+i)6rr)5@R+7;cY)s0n2H$0-o"VZ'/.9m>/Kg\fQ/i%-"&]mC<-=BSqo+[,jb!]?M)=\fm7^]q$(AkA"jc<Xn295"5[?WFRT;jjh@$^kl,;c6bDsboh3]i4^SSH5IYl_^A5=b\OljGj"^BU%5Z)gbD&\XWhedTOs/KASL:Oh[mq5c#i/D)Un$(I594e(h]4CWnG_ZCg!VXi6#G++O_2E0bU%V8=me,,TlcnaDfm`ViT<IZp+.H+9%rpolCeMfQ;rZfa=\hD6UhUU6(s*")#&/'??I,=4'9Y4#;Ilb>n<DiVA_p*FRBA9PqlI+0g4%c#gr2o/m"216Yj)4IgG\m+LUtnL!%Ru58@bnVVnF;9T(&rIG"Q`F1p?2efN,4*#cU6i:B#B9_;lbgn/&UgRneb/7;O#4@pXG?K!rTL?m861/K_:<,9eX]7R&&(\@G3PJj%)G;Z_E]Z3k\ETTN2nLY?=Dg)s&=T1I2S-Uc,SBlnF8Gq@eOEQ?S@9H=3P/"84KASfr?3f%H?8W*iC-bWDQeNaiUH:#qRtX$l_1d4%$1Ba#[G>Y*;e%O?^3B1<R?I)BlSe&&BKI1+5'j1[Rg*2ih)r%QeF$oSU3`UaZ'+^i@39jfbqP@C-9MlW6SWZV:&+DD#LX_"oC[OE%k10:``S'o:*C%E/q&T.m]CS*T$LdS>KN.kg^3sCeEl2+=q0Jj]k*!SpG."T[g%sk(+mGZSZg5MQn(I+0Cf.ON.OW#D\\sW/c0]h*%\LWd1\%1@uIi3&2bG2Wp`<'P![,$e(c10r@j*7M>[%AXF7SU&9o^hP\/,`cRG]iUbWWT0rg0NO)=4uc!?*rJF*&_S!4lb-Y4kpgN%_Y)I8"5B2H?;u6!0*8#ao'hLgV1Dk(<:A6,Wc&+=:qKfo?[erkf:1Od2j]S6o(r4FOR:+"&HXidnS5::gu%J]pM9K_jq41;STTDS%l&gIKUX]!c6)]=R&i6VKc7^[ESK1"i/0Ai5nY6=cC\c'1e(XJILFT7Ydr\"+"(Q_3X&G56@V'ttOg*m?UAioZXZ!r.IXOHXULsAf%f'Y\IY&.kpD?itqHTX^n@WO?sYWb#hBs7Jr+l3aBLrArq9@eTAn3(hAj6c6rg"#pJrV7$%\N#8Ao]kj7N9l[ml\f,!\t<?ZL,@#L%r-nL/_\\*/J(qV>*FDgKj7V\eIJVs\^3T^m5$P_,O%c'M3H1n8_sUuAT?E*k<SVJA%@qM9Zcc!dJ/1RbD?P=X6fPC.I!`DQUrfbf%Yp=O3%@PGd*njN$FRIq(bi"+j/nctX*u5f6%kfk[cFU&cOm$\`oL:=&.K]>Q]IK-"qqq%`jk\n_gK+ml/C`bRpA3p,X)?(p[ooVb%pJ<&'VYhL[#IZ`rLl_&DTG#SA^MKJ9s(_GV[C2L+h';DLcqLprW/FIRVO)t_!eeol8-g6-Dh!91Z0uh=)+c&UP3'!QpNlFu-#)Z0%AO_ARp1"aipROH1o[<Y@"#6$pMP9D%0pFGEA@,/E4kAC<B&CIOP?0%B^R)-sc4[O_I@$!R11lpaa!X*7@qbg@,4)MI>(+)sJ^28B%a[CYA.ldAp`au%XA[lP2@1>:mZY?TJrhQ1h*>.@Y(?.X>Q!?0(\%9BWDP.gQictI_;]JKsqt%nV4)!Rj1N_W$oZj*/F8Kn=p@[$S%'2:;DiU<B;BC4#>]'lNJ*]:&XluMRc^Y<T<V13.r(6W".:X-&@\@sCp:]j[ZKf7SLn6'<0E#f#Sf"ta'IGK+5DBVKrlGT36iD%N<%?;2;9'AJ]ao69X=I[ToR[qR@=n1FLU%mF.fqsTG9^Ok#5[DC\PbGARcnQb_9S=&,Tn+t)+[FtQ5eAuO(g-7<95LWuQ'q>/cGCTAV%k=XRa$L#OsF4G`GL;%ZRpAEO#3FhGc@ij\$-g'4S_55o<`K0,;mB,hMS*U$"iR=Y#qUD"@k5;hpIT\^7ERneHesu!ideq&>O2[#1%k+9'XH%(qU]WTZJ)\;T":4mn5qAWqj"C(g`(T\)Eji6B17W!P)IP\Ig]SW,b@[J,>5LfVZf%]NVVmlWVe!%mrA'3XIeRs#RgN`<k%h@Il;Vu'o_Alq0)+CF.DHi7ZkbtuU_#PM`:J!bu][N3ZD?a]j!:OdZFo_%`PZI@:STA-:$Z9)@bcCF.lZ[/WM24)q$TeBX*D-!S&%T?Yo$G,I.pUT\U1qO67)N]=EObj"Xi2/B@5,EpliS5,WedE@[4jm5b0Z."OIo65MXe-gI^Y]==d*^'JWb3IJY=krqFe#>Dgo_:I*%S($WlRBc>Kb9$>>2:mE0rg@3"EPA'ul0=_JT=_buakZk!G:LTKY*QUsoV-O%qs3Leg_MpkCYmUhA*_0"0h._f:JIdpALsiVG=G&"%SN>'6q/`C$l8Ir"r:T7/j*jb$T.aJgAOp?TH8^8XS*H5bOkm/L=ehTaZTF`Bs7nQtGIs@#l*n[bgrn'^<`Z+3TDhR6mcVgE\Jq/*%q><+^;u?@B=:'p>R@Ohhr:Ykg+3^p.Vj49B8j@g.jE0Ys<pq->)gRu\)QT&<LY86$)@MhqaR,pMS@QH(K9Po,e)T.qE`^lT^Y#l-%H'_=q<t_'qbSXPj9q]sTmZck.Fh;hojR-@*9^:,S:?1foO-@bW:>J5)rat7CYL=f7jR)K06/8U!l2&TqkJ+3-Fu)59q_VdDG.Mt2%B,P]eKO]>;5AJ3pq:IrUVjhJ2?[eN(NFm?[3:ci+\'mrln*\rL<R+j!X;Zk`cSO7FDHYMBQ-V7mfpt<F%)e^b^*L<R4C9+Rcg15(%nU5k-.D+'r\`NFhDa/_`F\;Q%oBZ@$mTfc54#\ZMSY#\tcaSD3lqY=nI=Cr0p_J'WWM\j)^0Z01mI[ft2pn8Hl1'>0r9%K5X4']6%c2UZ\kl:Re[S5LP^SH_Kj4l^tSR,H/.A@\Aft&0d:<ep3dC&%/[u?78kll/99e"aI2>d+oAGWX9kt^--L1aMan+.3lRJ*7ZrYUii%/forD\C4%bXDmb'm9m(=h:A(+dX!L8C#cm`'s8"UZI=*(=\CKda_1L/PVeZ*2)O.A9_.)7f@S3H7s&LABDT2Yq\8&Y7XnU'4+F/n%Um[kS<f]<gSr<goGe1T@QW!MMo%ZqLC@,F(ltJNTl1$_&E1$ClN`<IPLQZ+Lc\_<I%HfjM4W'c(K\udBohnRk?^unHI_5?DW7$+,%)`W_IVjZPiqXeLi;r8SP]uYNB.n7kR0$d"-^KrUL:Tec2DG<7=S,#j`^AdsCX]Y2dY63BXCH52h[GeN]K/`Vuf>pUHqY"=V:T0f_%&d-TW.s>m>Z1f)":NO(CM>Po[Vr+OV;uKipeV\c>?(.A0rVE77jpgE9rVO>#]U&Herm4pJ(9UcZo8!4.\[/rHo\$]L:@?R?e"/YD%?a8nhj43!ehUf[D_s=5\\PJP.[]aT?=)<-!S0&;f?SD&@6Y"S*:Rs@QH$2<?oCV7EeC09QDf>6pMDaZTWTX-pX5aTa;gWO$/ENA.%!m(LZ(cN[()PJT^r?oiIBpc&n4-K7f5.u@NoeDGeRI<Ks/fXbsNSkY^k!&dDZbb<Z\[:,,5Mq[US)b0]^WYHPORp-qQm8q![EqNt%V5*Rp\Nt"am7O5b=?7?h9PsZf,KA7"d0Hr-JRRj4f1a]Oi7+CPX"iU/"3[ki(\Ls(+&gufNXe]0Vc.dNG0Z08:@7)*XA19GmZtf4%?]j:;HDbTDjE:lmGFd@M%<i`TA+nbU4BI]oMgJX*2oEOcEMoo:8"Eh_jb<CMc#iV#G7#ilFuslKcSa*!/b#j0gF6q<3Lu<r8D=)H%9U2X4BWaR@4/M%eZh$84p7LW7ks]_&mJefNe!^2];5[VC\Xg#qU$6(O\O*4H:[I@`&9cC7e4,BS:2V,1hc"QFm-NckZ"8j]i60gE%dFX]Q3Hki!'Xq1T9Klb?Djj5k@e9]%Z`?*"k#OZP'lt8LqjaDUWBZ$aPOUkYc_EGrCog\phpgHQfZ\EdioieYIl%tCr`CAaFh*I&%XTW-#pN+MXp!;^mPNmZu?tqm)>LIb0C9u7WV53hlCi==YmWPQJrNiP?bf[Kh20sNS]rW]c0B$3s+Wp'tT>PW=I#Ni],E2lGNjTbk%$muif?[$"tWE/he8eicM^"&eDK6;SQ;F<MF(a7DbShrt"%F's2`YEh8GgXd.+,cVj(*3FR_+Ugi@t#[$WVJt5QC&iqPM3k8rS&9)%]mkYs5Nu)b:X)^'.T0R`$5T\traEchL7_(HW4#h(aRCIp(]UY6RUXTC.s,]9XA?5:QkeWrd=+8kXe*7k?2<K&Vn%n8F40a(o4",G%-c&:'\lYmX(+[LQ`gU&VflD+CXjk?kb4!@@l2%HpJC0Gl$TK\?:EEN-/Op2=3?B*[ntc1RXdsR'2QtqVXZse5>>ljFj"dNU4A^39%MC1>-`n@XTJ%37!0K&iBF`UYR'/Bfu1r6M-hft>EdUmX6;]f&Phh:@>eB?fLM$[1^=hCNh%[hB.g))"heFEHGCmYEN[$7mkPKuX^%QU<!5h(FYK0;\-/->"b?mR3Gd:7^ak6uc_I9rZrEdbT.(h-I/tdp4]Yl'O"S#ECtTpMs)(*f*Dco4()p;Db'Nn\ro;c$6fSNhnWJ%s3QM?Np(*1T_YF/T\e2MDpaXnC%nBbd9PO01Ij@4HM*R_aj7uoqnZ6q(7*V/8i=.*'?sa%ZeA$k[:DF_'YF+sEWoCEcBs<DUs8g^%:PkppH>RkU=0X)fA[NmK@b&-+2lfM6SZu;O:U/j&*>5=AI=<DR:g\FsG`#H]D+JpZ>t*Y`1;`(CXSbE(U6X#rfYPUCTjlEhriPTN%<-m0KhICG%P4Q03=AkfV)j_m%PDpS!)_p`=lh%$/.sCpG_\Ggb['j'&3Ka*p]f$b2mrS:u-qcX^FlPmfKuUG7)hY7-g.VNa/frjA%\):bbJt5W$n+-WEUWUQNQ_F*]AJpPGg;u4*9X^2CZK'Iq*Z-M<HrR+7X#'JcM<1%@KP\VHNL<*@H>1&eF)P2.?>:UJejF/f"j.6!%X]otW-3[r+"0&)4_hf?Fom7.NlQ9tGL,(1Q/^u@PRZV@4r:tM9B8:XeSoruhEZ6#U3Aj,DL318=>GDB!a<?Z</@?_2pdtuF)U`"t%$m<]Iarn6en'r%q?@i3ZK-q<?k[r5;q2OI\Y>T4Yd7IDQa.G)`EW.67r`r#jms?_M\+D;=ImWHOn*A3&aU._1XC>_=['Nl:83C[m%G`mCF9eKJ9,bA,>,_9/e_>R=W@R\$jdNkDuUp]nK&^ClNo8j[^&iS/jg%8sH?*_!^P)#$m#+oB>[s#mAe4(q<>SFjDeE3[DD&4jI%V3Q[C?>P!7`Gu4O%HLdt04sql9$>_;YFlML]M'ta]M/\"*d?iBM<#$r9IjIWMA>4ICTo^7.88;p6,M*4<2Dg/UfD-GK=!EharP>u%9IKRB1Ta9Y?Fra\e]6,?]?C$eXSDs:,a=Q_^;(A5E&0'M4//)+De%V_q'O;`V"e`C)]]FaGr%&HOqXipM_RB7*>WrA1'!#<Zr'i$%l\0$cFQ'OPMWKZ*4C+7R-RIt[ae@sc8@rONFU2$-kkQ0b'uA$86]1.a]a>2e:VD_5]*KXAp0q_PEgYGK0#+Ze^GV?a9))W<=A.Xh%acf"I>mDg'f<ReN7Z=N^4%VfFb\3GSij,+--r=\*Z6c>2enI3Wj^)VWk=Ikj=<^)aSe,I&&SFCJ'*SkAN[@KC#,eGD*FY$LVSVMp%Xi[f#\3X&*^$QYDmSa%t*A=gbdW^g^T/Ubs\,3EWNqRW\;3mu2FV[!+7"Z9;o1QP4m/Xi,X23sWQHRY]PM;$=Ts8c$>-k(/^N9uG%)XU_PdCQ!!C8WUQMnD2um<$\%W0JFB?FcVYB[Gi"./]A\N\cql3QV^\ZCpm;@7j%HZjW/a'kSVPc-t_m#HY63CpSNb2=coB6Z$UN%%ANEs)IH0_8D9&&TWuE6&ko`3L<[/lrK'Il9`%>8-*6?3aTC,&<)QX9LM>R>O_UNCMC'iR45Hf"E%;6I3]HWd\t(_lO1:N]1.5WC%ql4./W'%b\iC$if'!0ZuI\2=ii*ul$\L@SkV;_/X=ie"FV5</F')I$B/Bm\$U9W#:qf#>,?Xd0j\J2raQ$$dU8MRU$^4)^)$M+&)%Q%hDi6<RD>h+k43/=(u=%WhKpTesuUL$(3dSEbg$?)/_0Z_&;ho!"9Sd<+qYS;*0LK[*p4[No,#8@rQoYrFf07ak*-q5LXEW&o'*%&T-]V'af5'ElCYL]9Rc%0Y*PC;KSKD4]N7>Xm"_C/se4dVoouV$6t_$glf=u7N)k?X[t'$lKJ>YoI&f.-?J_@-9"(@S[m>"hPZLt%7fgaF=7#=bHL"S>/Xf;ODNanF<^Jr,Ads1Bh!0TKKN?<4:W:Dr5n#Jnn`[WEVCrn3+njsOjBL;1![ij0'b.,f7O[6tm5Oom1jM"B%Cd2N8(2=Ai>41d%J*ld\H2lsaflDRZ_)as>gi?Xc=/knjL9A%<:/q^F>sjt/Bj<q?`a69ZTe!:=;q6J*f?crWQ!$BhbEqX3k_^nS%<4-,c20?ePF?.m'D:d-/'NWRLeUh)Xd,fGn'm.$1d7k'UE<RB9q`UpP/$>P/^5MDpk_^nS@.1R)6^L>7/uSm+)-KO5igFD^Y1Mc:%![Xt3r#rK;oIdOHg`A,BS240JFHCU53M_o5)\&cp:[a@@UpMe]FdXtuV6l/[ZZST?RH>[7b;>^%)D+epL:G*/YnJE(j""lG3"N''%IYjMUes1<QkL\e*l?q!WaptC^j^S\E<RHn;?6f.(%Z9C@nsX,b"\I@f*>MDaQUh:Z<(eKhP][r.3fUNu[H/J)X,^tJ=]9+Y\nP=6%ek%>^b20$Zn'#:3goKV&UFOS^C/sVdDbt'u9.%,Qc:nLWgC.4sRk:$ehI^9>'J.WOZ+2Vs>#dbPj&q^!-&g]b@]5"6HY'$P-sMCt%'BuTt3kk!E<JR[sB=(c\/3CbuX1LsG3=bNVkEMHh^--^87]a2#X\#Hs\Q*%;!i!17XJOY$7NLAVq\:J=<FAn1l<a`/:94<@[/;,8%/6080#C^4WDD4j,r#C'L9C-$O*;Is%PFL*u#;`FC]lY9es4XJ"VR`ZoQ<L;nDC\-8VP&nb(Wj&3=>%U;Z=9pcB%gFnQ=ZfXXB=n!%#\=oIe]o]e*S6I2:2?A%?WbEM:7#hgq)7h5)7,]FX'RE>>N@Y\5L?G$dC_0Z"TGq[V!bWq@kX)P>Jf%i]iNk>9/[>_$rI[`%&17g%\:NG1;'P<`hW^b4\INgSBs;R5)J*cWCpH=.?#//4\K%Srrd;*!Mt3+2OrGs;r^.@AU@Mj_B[XOCcm,IGRSrrOQeleM>cS\[c)UG.%<Vhr&n"`XRFEMG4JQr6-afgMH+7,+R[U)Yt0tgXl;uGPGp=q_IGt8Rgf%Y<8'NC*(H5^n;Z7H?il&hY_jjYO(TZhRA1'L#H0t/CH%$J*=:<FJsX:i1Jg;H?]Ds''F8a?49\m?*Mj[aBPL:.Fd,:p(fTEL;pN3CD9giV#DiRJ-VLpDt2e@'h&gUQ%%9nfF3NC;K=$1+5I^%=/:#$4G4%u]7_E%dX#?m4YijlF'+2`O^>Z]3P!9f0't?Ub-J+R.]buhV^u'D#8;a#F"U[\pq59S-:>WX7m^g`)lHG?C=Aq0EdGo&%XfVa"D#&\RZ$c"<)s(Rb;&2I<=dH!+/!i)n[#8bK79s3.\a*?5[oB2CCFA=Xi?;2^-Ki`o3`U*rq(,FZ>+X>I.eq@j4^;f]knS4*%kL:6u_f^&"=S[9Q+rooS4e/AsG?9>rQnMYr6abZp\55sr<lB,:X"<+5GTphIlJZchTu(_o<"I$:S6`/B_g4<1V5YZAQ0`7p*\Lr0%[$8:2e\gM'@X2CQUOulPejI7G/16UL6;D',h6K^LjPa$W:1QrMJ%N2$;$0cEA=Ojk<Qu2b1>-F:9=@crN[3.Ig(2*goUq?tRE89q%"5fQBTsu`4m@DIP0:22knhT'dnN?B*\Ig87e=pllA9cb7"jN@PnT3$tOIF<O<i27Fjc\TmF/d[M@Vm+N?,g2e=YeWfdt#!"1??p$%HKB=]-QbOI]?U8.][>d^$(Q(*<aM5;o9$g?:I@KJ\Yh<F9fDmQ:jgiV6(Ll8.L(4'JB<Ft]<"Q:*&oTK6s?l?olAt?hdoWq,5$:9%.T0&LH;fr`G'[#JML)Pq.oObe0.KlI::Xl-[Cj6/qQ94?LSgA415bP,(oq50iDFOk>4NGZ(5J&s>m_B>Yn@p;SX72.T*=&O;E.75%8#6Xgc:d+WZ7FZ^L!)Z4W7RkbKr6m%X;%h&J#oGoG$Lg[If1V>JPRX5'brpgjlWT*T*V'eO#?2SbbDBT)`6Z@4+"3>!u[)p:U]Rk%LM8e[\6NtrZPrePA-f*sFC&G<Z,k+gHYm'DS0$*mmVt3!,:_4ViZV?YE,46><e"ippkm8*YBR&I%PQ.p#&c\k=+[-lB9hc)rnPfi%kGe3<`le:nGJ&%'EkK//ZMaQE@EmWcBIq`<)i_h99jC#hpDaO8lG)DAQ,b=VM\T<a.3EBsQEMD+F_C]_koCeXP/V=2Y.nl?cK@TL%ST?_rS`tXHX#iBm.X&Flb3d\\fj?;1YcE6OZ[J7nks[n9X0k4Y1oeNPmc0e.G`1^Q/p=R^m^AjZ#ud1h%?)'.(FSJSm35[72DOgf%+g8c.*?9HH5>Lg-h0p&;f[0ab'NNdKmI04]3kTT^GE^YCD=N%%hi@7h?2jD)20X>$*j&6$\bGV7Ir!b<,$3;Xs&+)*?1P[)nU"1%%kIbN$DO"ta*nuhG.FG]fVA)nl*t(Yajl9]OTGI?`9;L@?2;!c+VAR_+n5F6tHWk'\VS+>PpK5,9QZH/';V*BY2*:Sup@WQXP?^5G%fXmBZ=0ui5;Y*V'*I?[n/<rtm/C'#RC42+e19[n>.^Q5;l!c;NS!V4XcEI$"[oSiTPau1I]*?EDTU**#V!OaXVG*>RQdsj_778HM%?&LA/@uIOgeTBXD@EMU!A_@+/GB%e19rC^fh"`WE<RYOT"J^pfXB"]f?tE>2f6uaj\sb70nQ'sB9p`7=ge1GDl+/o!Ui\J"@?+gC%Wp-hK1`<RM0!"6D4cO4@Z6LUM<7>FS=g[cPHW3_+>r0ppC:Y&@>kObY/ut:5=g&i,=gG'lZ@l*ALZqer?.P+SC6%.Ndq.(X-#_#l%75\B%r\;+Y[$iU#_V<g[]%2'4pS++ZP8.lJR]^&;H<<mCU<9><eT=qf.&4e^bA+U>bu:gJmS,QE<Wh'h#sG;cbDMVHk.l1G9rBk1%3YA`ceT=sUA!rIAY,^`lC?b<M9BXiI=c8F()t0qu/ut9j]994aC:^JQKkCtY.&C]B0`Z!hQUJdbms9=N2s&rV'cMV-J#pQ)VjC(d%cdaXoF^JF:G1!r!lH3cVjjr[E@\aIbM>`Z;-]XY>QAS+&'NdMGC0C5"*)u?fMHN5dVL?:RP(BSjL6Sc5Tg?)/m;gU9F:5DXLFH?'%ghW7G3D?SE1bUcD;APBP'Kik7fK@=`Q>p,0o0mkoe>sto`>SJ*V,d*WfA*dr0Oh@fX]"--YV4fZ6FFPiY#Kjjf@SeH<LcJoh0".j%>oOj(0!;a#ngJ*UFOs9i;W]i\l.WVjMsf:.*^+H8i1)<5r]oNc.Fi%$`FdFkl[I^/D2`>-!9[$mG,uNF/*/C^bK2n`,M/@ll+0$4%+,+h4)9mK)9$7RZr$7<N<GABcbYL<:,DchEPB-W`@<0a)>L=63eFVTh\t01_VP`K\Ho=r1]OuBMTrl27S89T?WYYEgV6ckoWL!?i%V6ckoZ#U`<`JMj`qg)09fR50$>A6,.4MCV<gM'UIAS-,QF[L_:<g3pFU/JMo7?cM/6"-n8/P?l1mPQ@d&?L)R!huqP/i$15FOOpH%0Jd!XjY#YD]Td9gpKF4XN/]dNo;KS8?%;[ZA<q66+\^OPb*;P/`uPmM`3jMf-.k_e6AG#aSTK[t"55tQ?[pD)I-b%-:otFCFgf[m%%o*Fmm<!e]FkhkukKgbFX1_cgKA8eJ%O8Vr',b>*Qs7YYV?aiQ)t'0\/!G24F]D3O-!,2<DfqHemRh0Q4h0HG<Bg,.$k$s_C\O^=%cK^6ADT_::%%D.Eb<)?29RTJ-)t(l)pY+:0G@aQ-8+ffi7oM^]e$94j/Z_*`a]3C3eIma7Wj29"lHIDkY&?m%IGqV8%c-A0=56Pb%^6tU7`U3;nSo`X7B8a06-bgF_;emip(:>c)_KC.+leAb??(hal-H#)qaX/d5*c8.o\UL[CHf#1RR+a'")OWbcaHpB3AP@@a@4cl)%Pr?dPVFO9ZW+VLb),rUZ>)"NM'JYTk5$!#@=!!V\i%(qQR*K&s.X+N7L723&W'hM%4,T_T=JFBiEGoSs+[=GRMWoC&mFJdR]p5[3%eB`\!WX.q]BWB".p$B91j&?":YI;$$%Wh;Dl?oUp2s!cA<TBN:T/`T-IAh-%26Jd3dT+U^26P((KT4XTZMP#05Ld<Ic0d7@Mb:C^%348:)C%-:UDeXZ0Dh%KF@`"sKX#mVqn*"lT`Z1Bc=H\8k?+ZQo=T(i+iI.-OeN5pD*T5`#kT71MiuQrUQ+Vlh](+f?V]K_,^Bj<$%j'l1;H#fnncPY!0rKHu[H+RQNo8<$4;k;)&@&)GjB.LaGe\RH%geLAjYNilDMX^J_.b0-/mWP,uHFUErD`GI$0Njk,gl7<=s7dCS%b'0[r$iI?po!cegDPtLsk0-RqV_5)Rec)jrO]R9]?I7s%OIP.llF4Tn\5Vn%"=b]i/(:'W(>U4FH'm>8;<@B>_+J`LL[][HqP>g_%q\Yrr.eTC`0N.@2H:bkc>`;H3P\>&GqWWDg(6^T<@lpf7`Z/S9_lM360V9OT=#+WUX#QZTA3=NS2fZ,Tfh=!D4sr4aegWu^,tU\!%2e,D#4,*82eS+-1png;X`;+V3hmuRb$AZ!R:+sla_3XR9/[`:q7GBl)=T1AKPt=7l<L)-AC/mQ">![n?G.MBJHqFRUb0;TWCQ26-%[Z9<"(m<=ZoBE*!eQqJlX\+H)UR);u]P3R9SdP%qe.OY#`[9@R%<HDLafLetmnDuiPb>J:>9&&s_?YFrgpM2R>-[*kMc?(leOUSG%jn>H3B?T\77%72?\<M9qAm<5l.I-<i>jJ`X[QM`YG7:/PYhMNYj0R`;e;L`?>+3cpCMKl7Ik7!EOqD0:>U`N+>DC%so[$(A>j3U#%XhTgH]-JCEUC$<.G"%<hE"p%STTKt4=\cT)=2fW&8g(Y<?d%^ZOX6T+h0,$4b$!Ca1)WYgD6:@6/gSW?AEpD=.O]A`5s1suqNm]%%,2[B5D*0PK_3AlNP>]28s6bYGeaJhX"`/>E:$2Fdjn@K2[P$&YN=:3<EJn%5g1[SO(7e(*]uErJV7RIX=j,:6\>DblHF@::Oit17%Cs,#eBrn:=3"b-:U'e-+Fr9,%ek$UL7[8ZbJE]uig8b9+>6Cg<I2u8fk3QGR%:DY[C)^0'/SqAu\6,5#J/PF@ZN`*J&%5.H@'OCe%b>i5b$8?6YZhR!rNE*M=^p5hJ))cLS<IfeN2m!9<dmj<fa4!/O:+t_pj@6TO0BLBY8F?5LHj*i1*aZuj.EOEX]9H*db5[Nho'):T%s*pC+JLV$3eY>e5O?H^S._+"ij^60^k5CPc?HUm\<PY9_!o987e#G5aIB-_"Mch^YL<@9]YH:F"Jp[IM4<(<<Hi5^teq:<&P5"ef%H\M%^PhNb$0*a#XXaXQI%2I^b=6tlZFZ*4PHi7.!=8(]]^U_3crK<Q'q7V6rR3@i1Dsm9K?cginCrM?;rL2e?L\LW[:G(1BdH8,k%Gu]&Wk?PEEY@$gQ_V5t!-Ii"E"":Z04Oq+B_R-8+Xd%'jCN6Ob1%djPn&;th`I^k6a1Ak60ANVp>Q$TFJZ@s@^Z*`l),9>o?GE3c%kadK$[5[jVoq:H\`4^V:grJ$c]ma-876+Fd[*sK_H[\CuHh[@O=5bpDm(pAa\`G7EDY:%E(U'/X:GE2poh3fJG&a]m;4M7p,nYPu%-!]?9EN`_h_KBHZC'XM0A^t_<\1"n!p\4Nleh,(p4g_fPY9`LZH*:RWNgP6q?O->q[CAu7oR2*-h!:<SMFKe#=*#YUoh/N"aUiI8%Ctm]bp\GUP[d$'/DXR0J50lUQbL?F'I`8em7C'5BHi8i^c$<FpmG@/q=!hX*YDkK`->A^TO0<p$On\D=i*+@AF-b"AhU$YR?`C+$%E]?a*p\Nu2[ahL/TU0!?ldperM-KqiWCf6eENW?Dk,;VWlYoMRlW:1MKU)5dhWm+%GcP3+p[NB*L"gts?U8g2487qb9^=>!j(kCs%2j[`,hs8m>0g,@0H?$,q7#%,=qJe/O+iC$YrSSj``P$`>M,(TFV)If8.l?"c@Qgc;b.lK1SDQ*4@V'>H>2#6Yhs6WJ"63VaHB:;2%6Rp(]mBl\lme(@$/)#o.rJCtlRj<$0p\O!:O'/UWZ18('NI$L$ek0W]Eq-hlD<`eqhWpNAP@4Hh<-<$fIHpS'[E>uFc+SSF_BBeF%],7$[&.^-W_VsfHG/d%hZ-2_"m\AIC9<`fqDK4ZaWbdg%8`sT(9k#3qh!D@b%n`*]FZ#UiK)/Cs23"T=[r/RE?W%b0>Ap^Kk1a0+%M3X)"M'$)ZN2`S!:VMj8WrA^Z\b3NgqUe#TrSuS>?LKdQk5P;f^)`/nefMh#(1.i:[GP=,#%'P0h>YmH)iK/NI',O0VmT->Gl-gM%Y4H[`r53U@p9hZKE`Cqt^\0`nX7jNlmet!"c/,o+rGMZ/Mt:sKHM_LAqne`6oQO\mGOp:[hosKsmJQ2.bIR@FIJs*-Id-n3AU\12%)I7Kd^OE8fO+#dmOp5\dS_d-5eoGWjgqj!H@=N^bluTr;qrMd+`Z"YhX=S6A)CrS*2iLa\Gk^n(+rG`Vo=qKD%A(+3DpHmoSZ!*=%Iq!T$p:Y?\"U"&,]B-e+Q0R\iknC4h$O3q_8><ije&g0dY]0R.)<u?d"XNN"r4!<gnV,:n)l^g9V5dL?3G?:u_lp8p:k*5_adM"F%?B3h/$m)#,cOE%O:9=qop@"'YIlI<bW$L1)MaRA+-D0ZYaB.,F<&KO2$S2,O<Fb7dL7gV(8X96776WQ9SOVsMeblQ'e;16'ej8.D%\MiVO)]q^#/%8#rJS*s*lL'f3V/\<\H0Tfij7CdTc)6h7n:#$Gqe,5RQL/[0p#"`Ul,&nDImr`E^4abRlSD&M`4^q(`oFDOT=4T'%fm_V'>^1MIH<]&"rr%4Rq=&&,^M(JGs6;#dSWmabS9+VNQBO&r5)O00o68<5Vk!TSpe-ROkEo;gH_`m>EN].,`+i]YR/jRW$m7"m%j-BU[eADeuVH0#-D4d8&1FAD7WuijeC[::qEocYY#>,Lba7KVQqdoD-JfdsllI"2$FnDW0Irjc.7LuBg#LACed0$(*=C$;?FhsF7%(e/RL4W(j>?iMm\^]*!%M&t1BIRC@uo\"ac(_UVl'akNTEMB@XYr9@T5JLoLMlY_K=P7V?Ordr@*qH0CpEEWDoNDs\[98'IVGO\m%+KjnZZ#&;sZe+(E\62eZc4"0i-W"$k@VNn'X4bl!pM9V_R:Gi\5G=E>#^Gejri?&??eDpg[C*BPhS0l%A5nN@8/eX6<p-2;[^Is/%N?X\<_e-Z#bsl2KFP_4rDHD=ZpqJ?0KtWP@5KbE53sK:F@SA\0I[kh(r4/=1`mjOH'dDAG*O!,d2"*k(o=`.:BeFgL5Seg@$45WP%cA.h"qMBRQ^'ge63o='q4Q2VArN]uJbF]h\qX[+_G^dmcE&&/WHX]CXKT9P5Oo5rRkJYdQHEhQV[![<%&f=RAJ":O2-gIF#@r04F%b^XuijiLnh8DH0Ed[`94UFN^0$&.%QnfQrt<1^]^k@ZsGe/BD*MFIJ8ru?M1`@hi%1A1CMJ(oM,nRtJZ$chjUjl5d>Yr(F#XfO'l%+8WROTS.VY=2]r.l#QRi`D=V7=:17>Gr=K7qo<<_f_r4WO[D\#V>d/7In%QB\bgY7f]\rTH2`[+o]LgKdm(Bk[+7J@1AIk@DX8,.%Z)M/ncY0gUgQ/$49.IcfUo0@.]lD"9M:dsS<<G9$gk7QbIJIpFI-_*16O^h<)eGIlrWcf_g:6JVSh"l]p1&\7,Z/-o$>W?/bUB/t%*CUn_"u;$RB%rd"\cKM3RrVP_*XcImc5oCqH6#'HkifAtMn*Pn`i*!'S"9ppT:&j"_VT^75M)eAk@tYe]3.ob:Le*Kk/j8t^5>IE%S:ru:Eq<=Ea,(Q1SHAtai-gg5D"Xk>L@dnILff(s#0D:eJ%W\,`l7nn/M684)`=k#[;F/1oREYmmIP=Q]5$nELAWD>l]c_MnsMk@%ZMP.1mT]7j?`!GG#jQo\f8$R.:!N*6=TA9^>L^Sdi[>'h@#qMBmBqWQj/2[_o_LWG'ZTo)D<H&=[N0-qk%J^M`>U9X,Q603Tr"uM%lX=(oiW^0rZj+IkdAgT^=^"C!PPPBgJPjGUWBYG/bH0,crL'1I@g+03*PR32j4C7p?QUYsTp_;V`boSknB5E1cbQ(<Yu<iC,3Y)+%GfGa%rS_`9U^>2U[Jq7pd1\e?<a\UWF?=G7FoK>SO&tX>/>#\=aNLA69R]g;-B=r/"c>EI@aY.CI8b64gLbPba-Z;"MVgli0BLph%GMg5Fm'/?p6K[`TqRH@L\r:VVmfo+I+L6Qp\%P=L5#("gFtH`odDSJPO3X2f.S:WGe^3_5kuRLmI)0tcmb.>J,8-cK:6DTM2W?]G%,NbnJhV6b?e2AHK_P(o$`3dm[q##R<12MO[5^!ejBNI"pg6]ZRW+-(E)8l+1,e.DE9sBPTj\iBBT%CosoMfE91koWPpIR*b?EjbF%<M#A@CfDcS[<NhTi8o+Sn^0;-&*B;Z*XRG.4mjV3SI5'_e:uP.l=tHY1%#D7oV0#hHF^tp8sKVR=2]$Wj'mh`Yr,uC*fG/i>&4EY%><uLOciZA.fF"YNa:9].Jl'A>$Tk<>$E@'P@g<`Q6&];:Y_.h8TLuUNG#5FYUn)YWPoWh?"]_S9Z%Iq9+;qBLh@;$DJh#=-fKmJW%&C%%!G#5FYV"?D$Ogg5^b%ign'!B?rKAnDWDFkbX*7u*<S.8mdHi_-a@i?3/ko63h7D"%AIsS:5adO'oq#$liCYH,*D90=*[Be*@%)P:o$$J6"9^-fm8DKi`2WH+2)qN5hLe$$+(Vs+B)"#.'\$pHS3_89rMHSIrbrgoYf%?2+VQ\\rI["a20IuF=2*`jIMmNU4<VAgFX%"*J0bXaZiA*c/1;R$RY+=]h^T26=]_13Q^-Up7fWk)5omQ+Id?*Vts+:]Bff`Ua24cZb)AqnDOl:$mE-]7'YSqWIUFa1f[<VomN+%\e#+-2bts-\$u7Ds6"gpl2'H!p@5h7\o2=lYHbh04%m'7:H,b2m/(cT]LWX)<$mh:qWe(M6o8"dJu)hjlM]Gpmd0&`0B7:PM\WQq%11mZ5_@@n#!&j@@J+ZiYp.sQDh8>j8;GiBbf'K'C+=_HQ#FB=8(I+35[^WuKfGN?\cG-FAQ_fl\B8q(Kc'b^ebtm-n=M4E<mWk:o%k9oN?l^Gb-ko;9sSZ6Yb<ff7[pu?X?j$-U/0UJR6ahtGr1@;guooIZV#9ju"-eS>Y2#lO@rin]fk5&kShbO%rY3Q*8*p_\#4:pQH%rNjhfA5o>7_"Q7hoQ'0SPV"#pRU\i[QGoV?QL;/B=b``N#^%_nC,c<'l]@8l*]jI7,oh7:-C&eJ;.ncP4o/!MCU1XF(INi2*fXkX%A_kB;fYij3!#bV&,BICECG("=;V)t'*jiI06_ccGqpfCm8Rlbdi&=&?Z/)Rp(Pq)1#CO4o,Wj-4<kfP\;e0GD%qNb_*ggW1Gh(o&%TGes&^akU"3MC'PXOfefpL@G?c-B@\?fFF?kg*PPr:tL^PZ)#R82a,*6O&h*%#4%W9"d;mkFJDT)WF[H3PX.U(MhF-r(je7A%rq+%m`O/#J,Z+E;4BCP7t*:*A*Fuo0NLs9m7tXf<N<`Gn\BrbF:Vu])[cngT.V%+hWFFHrkd]>cAUHbbf([aB+f^7Y)abm]5PY\K>,*%%>;<-_.aPr]Xpbmb;/Ar*\f<\?<m&h5coktnSlfb6a;kpDc)gLi[C')N*MsXLS)5=;WJOV@]B8^-:c3!7@9!6;*,<]tdG/)t)HC*@%#7'kZUYg6j%lhsAY,qGOQ*l^-S^`t&/n]p:Im8r5XNW6MJ$fQAA3pUcR9hflKcF`ICjc7;KeWY`(<5I>jjT1qq+D\$qeqC$A=6+B%VaaUa\gJ#(s-A+6htB:\bTGLGRn(J+.\rMlTFN@/8Q!!q3M$pTP=V<?`fm9LIXN,?rk>nUYrMIG'o090CQ$A*ID7e6'EtS&*Ao%k%O`7MD65I!#'_t@^mO(?HGX`s&5>\!K1U&YdGMa7>^P06gI>!"nS;0^dg1+#VOn.1nSd>:M`"sZla62\.)Nm6-hMm]:3c>m@M^OZl%B'7mM)3M3fXJsjJE/`dMJ/9qS4C5s'ZH[BcL,>omh6X'h'Jbg:d[1BtQ8^ik'$H5=V^\qZU#k0=fs]o3%\K,[0_NnKcun'0PV?f7%Y-,rLYZQCOdR+e8O;:jO2Od\aQrBtrif<B*.FgK(H?@cum*sq67C?a_%QICumt[U@`kR5aak)@rn)V^jT%:jVl!us9hK82J%aN+]%,:DbBb)+8Is0k;M%sqc'V#7I:o$#_IPUe]OaSeXdYVs.k#9=)hPp\rXpZ*,(kPW.P^G^XMoa!Gj_$D23pKlc#Ga6oUG^bh(/lJ9(%p1'B\mBQJMmFs/bm"L^D*/,g"e):rL>C'2f[0a[E`=c=EXIL+d*t4GimZ])aLp)IZQ"ZdXGs-$hE>Gh%5+)+erH0%[Rt5NQZuO\r%isnT(SZ6OghW:@i)o7koG-V]gZ/af,k$:1<`*JCM>"Xf@l,h1ESAtHSfbi"A]Cl"F/ZPA<Uq&<>EL4!N1^<olS^X)D9;1=iq$U8.%Q>#eH)Z9+sr*Jr1CV9DkT@G"--*^36(pifp&9[Z=Fg\Z+I'(/-I/4Pj-hgU-^9R6MD)\i1@"Z,<:I(ChMliVW[ZC'GG&$u?[=+k%%f;\FAf(P6>FDCc=[=).Qmb%@bC\n*q41B[]g-1XHl,`]MC\qYlFLGWVPdPqL#.e=1Vl]9\kbUZ4Vl]9<\TD`fPdPpAmWWLGjOufU%Mb]e1_:ct*\J`*+bYT0ZWSEG=B4b,MC6CP8UXtnOT`+$.N*^./.0#[#S+6-#k:3)0]Iq.uo&G_tpT.>p"PLD8s*2NkcM?Jemluk;%QiDF0=qQ2RIg5i^s*?u'0`=2aETdo<d&j@k.)4La`qm+b/(O6jL"H'q5M,@RSfTOls0lnbTVLnVKCu(Tks"q23PG<hDj3_$SC?6b%BFN2;EuO"_`TUO!ru_28Ac.2Wa7$2H6]L$<@]7]$)uiQ\Cs\6X"T"`S]5P=Ma%rK!"s<;76t"UE^ifKi_lOf;mI`URbb^r/a"ZH[%\'Hm!h6]kF+gtqa@b8^i$t@;#`=tVoYq/h#bI$TLAbT>Y?+1g.M#k=hGD+.HKcn^@]5A2PRDQ.SSdgKQpHAAoE9j[eRh;;*%m'pm%bF$CPjVP&C;FU@;*7G>m/Bb(!B#&JH?tN4G4N$Iu^/;?K6/@u9h=2Jk:Jff#@sKe^3d/3JY\>ErCeKODFl@W0fb@KCZ5kTQrMu<O%<HgUo;o)/^W4TpRBOh.GFPpgDRinj_YX/rG$07i$/\,cT1C.BG\o.^(YD6gr(hs+a#Hlu.cstZ2N##"3*h/I"V[]QD4hjb8De]j;%,X3u.P9O*Ol@It$D$YeH-?dt,SQGnEW*roC[2-G,J.S$8T!/N`":tmO:7^@#ksU$M7tsn89ZB7&'%Eb^K[0YEn7ee:C5pRJ!8B6t%'m@nXI>_NeWRsA&^2RoVgo'oDK^75a?W[_V"(1J/"="Tkg]74CCZ?:e)8c`lHpP:0BWr>+!l>)V(_f8p\g9J.a-FY-@&3n*N)5mr%@!dRE%i&K`@g5sBqo@H)#([l6Ygf7=9fd`/qobl:qM&7!"g\&P@.>%J,:n0#pb[<Gn7^[mL`tADpFaNMK#M6,B\NVbBFpXK`:r>:%l'Yq>is3f&'R'U!nme<&Lg%\$*N&O@X+I2=%EHYC7JgWKKHM="2/$\5/-/JfF)Ao_"5'84bW9'E<+6E@%T/,,/O_@f%l;#nS@U(a%T@^pc#lFC>+)MYP]>P</(-V:q_reEn9n[f1]1fV?L.-"g)RsQer4R"[l-X.Np]7^iE6i2'1p=\>UaA8s4^59^!O_0=]Zhd3"T^/@%1l#CWl!5HW"@-k!6\=!uf08jYBF4cW$qT.aC`Pj`BOSF&Po(8r7$0mjKO]-HKG0KFkLOM%ol\sk[5])GFD7/=@$%a0\jV=6Q_7%c%K6<)O>DCPBd:]iCY&@u8CslY$,Wp2&e6p[qj%J,^&pRen`H9P(+k"S_%1b:OOGo-eO'o=N/FU#((l8D$gQ'9JgCZ0X2f7Qb9TZM]%Lk_pd"Uu6*"_(EC'\T_c>E>ZGJPYSc#UipC_^*'.GqKWYL(&t?6nO.1"5P15@1fbh?8"79>>244AeD4'/0]!tKLqPBHC!W`&`fAc%7?#pIh[4%:e9A2En2nPXj8N]t,Y)[/^N2sU+Gr%)_DN]+l_Y:UKSDB])Pectb>l(>=b0%'6mb6)B]"Sq-*>'?I$\Qn[Odc!WUDl[%]Z?)"cY*]i_4jAQLm8)__J$`<>unbR_$D/Z@gKbXHd#J6(a5:*8Wo*BJJ:ipW5CAJ<,LcS%4**0Tnuko;"9Z>)A:-s,&'WV+Y6(i%JlohDBYt.lC/g,oOZk.4^pQ<qe("^/BO?E&+]>*n:?Zr@K7n*Og04U1-jV)Kao`[r5tG\#"t@C`/qfA,!kejf+H\+E8p\A+9k)$b%'Js'f,nZJt4XLb-8E^ACXHj#q_?Z\Xq;iHd.$CL2#I5^n%"N:?jLR[a+=-S:Qn9;3oYeF[hm5-FM*'IC[#73[QI'SRF&fh=\.pDt%<cMB#=VG$oL6928ZA-(<4ba^lCJ!6a&!"Mf![i_1Qo&o(p]tIFmrjA^m=?k)r8#:d@@RAsf&*3u-Y-_Clf3+#:8[!j9Ga=0?X-YK%^,Dr5`#StVa)u5"=SQ2(7Oicc\ON$@jN-tPW0r!CZ%.gAd2,)^AOp)NTq]B-17g#/jB<u<.Dl027gt$ek$gW4\;As*)Nobr4^WgQ%_N9!G+,aPCa[=p/>H(`#-OC%+'GP?9AdlL09r[[$Du%>E*+-`B+*s)Yl?HnQJ#D-Cm4H1WikJ@u8>/`hgU/lei0nYV[7Hj"H+#Pm%,5g?@TS\.mFCTro,L;/?,7-#tRMZYU5U:8]>)jq:Cmq!bkf+)a*bYp49OjM0//kJse],#0**E-@@hEn\$%n,DM)9ZWH]Qa4fGp2>%)JoV>1SU"#&DB6TZPmS2Ci.'b^utlYoqE!ee03qAZ=QQW,i","+j%^Y%S/r-45`jW$nXbXF#3q&N&JL.72k;*Z"?F`OR+s'7^93"%#bs-tL1g*M>;-6i-T5@'LdJUd8eS6GTs?0]'F^hYYQLGJ*CC-c#j-XB\6=Xf"L(i^hW)sY7R:lH%ad+)=C5D@]P"`V;B85+i^']/%Mi&ZKV)MS$P5,a(6HHQhQJ.(iOLH+@M(FLIZ7mG.8!YJFGRPh&YQJ?2Nou2k4CJ4*PaDn/:;.B/B[4!+_@a6M(9p()28M2IMB2dh%Q8uV?&VTA?ojNX'`R^ia6`LVJV6BK(LM!El.XW`bF_H.]cg=p32&odDaW/hj*]/rhXbc-)&8*/_8J<N_WT1GI-h\D^T4_?]91C$=%3j<gh["9,[_f/3(14"U-d^T^KoR.3k,gu$g*pJdcm$iRQ3GC=IpoS5b7'MEL"/7YJD`X+.@\U4VDTlW4.P;,Y,WBIs7tX6(`\kR"%Ot&QA+Tie!!g2uP$c@!o'g%-]aT_s1/;B;Xk?A_2'S1X'`NCoVdR9NF=^o>3(aB`JRPN)`g.1jr#)`bUA-Jr5[Z^fO^U9^P,jcnE%&DNCDQuF=H3]eDKI\]^G9>hAjoiUgB@Gl.`TNaI9aP/'Pj$KVgQF'7H'2(eZkl3pWTsebS\#pC^W%C>0f4%)qr6g.ibl0=`3[+cp%1b<?[gGEbV3G=:LBOS1AY@(SZGbOX9_B,Ij]0]k%+(1elR;XkGps]U)(`PAh7D09#d0:1c&C(Y&*#OR09-9;M9gf!C)Ytun*h+KD%d[?mq/[eC'01apk0O1\0nS)ss7O9/XDD3`a`m>:=kTL$JSh&M1!Oo<6;n!2b'hDJYYmM?4[uQ.;2Z'HZ073le)o2[9DBI7U0fi!Y%p-90.5-,<VFTqP&JR$8U!Q3\&4J&AQrE"NEgQ8]NEA)qbIY)Z8&oW:4(UWZP5s-*t.AX9](-uV-%Vu/tODTd!9^It)+D/1dm$*ga%FqnUt-8'"m[$G5COKHL.ZQsrSX+uC"lTcp47Z!BgC#T1dBKu[)4_T['+pD\fUp6<bS`c1pMRei@"iQ&*L/sM"S9/FX%(%J%mHM5J%Gr)-Ld+_kK1sj&0j=$_s@r/:q-VI)7F4>u?"='W]-S2NI-7h;">(<uoN[o(`_NAAmdcX5]-!_OCSLo/&nZW(eM%=Hg[`^!"Wt2/m%6*Y&u-`m[H=dJ?[HgD9UY)m[9\Cc;P7?[u?&[M*rbjs2eEDGCN:hC`>-7t,8plJQZ0sY$j57IlbAoI<#.F<g'7VDi5@1gbIqgm)r%IR59U,pJW2AVoQ4VEdO@RgjoYUVdn2"K?<j_75Y'*%8=mUpC-]'*SskP<'1*K2jK=IP_.2R&h/"`(oM$I0;kB@#8oFZnB"YKG=Wd%i=STt#-Eh[?+R89Bn'ASGqp4NS(VRO1dg'6@H&Hu9#`lY!BL3O5hn.<Ll(@5mgr8%FS^"dW<JFd8]ui+#?$Zh^]T-GnIQQ+#F1s#%FKFrpH_c$&[kU1`/gP65P_4R^JKT*&"e*BmN'KoN'*;lY1j:oC+jhm1\cs=1gL@!*L(WGj(<CBb#\LEb%6(KtdPmTi(^;.C$'0T?%p(0RKZ3CA=+$u>;2J0`85amoD2(&IP[M%CM.>At;"V/RA6;X?QZ_S)J$4l.L+`q1DF[U"a?.!&#WMh+&<<@%1&tiq27"F2cO8qQi%22'N]4S#Rr@TX+VqA=gN_(;G??G[7p$"TPRJqXRNFU/5;k;XFsPFNqP+=m_hYbf*';TZ0d(._o&*WeA7`8NrmDeTJ$<^Og*_cn%q%!_D'r"):_hT_Zus]KRMl67^g>QW/TkldpfOc!%O>J;5i[OC0BS"/LoaoKATNKV/fI8.94'Qp,Wo-Y`Wg:B\52BJ>kVkYr$XR#iDX%0_I";W?rmdYOqlg2h7$%_+ke-`($[s`Q^^dM/V:7^<[Wc94F::o5"\.637e\-:]s:*/HbI/dG@k0\C/,'Q<b_he4\^"0lWZ*C2d@%@E9Z`YST!"Yq-_OV\(?'ZWnUc+`'K5:c^^@M=ADKY;6dXKDccUi08rE$T&U374d6cGQK-XBp]flYfi.bMEoO23*6X]+-&n%Xh@!r%rs]@K#WfN\qtuj,,>.M"6`sRZEjRhPRS;%L'&1a6b"V/:"H#.1A.@&&9MkX1#p<h-J6AIaGtK4f:VLDV&Pg6M-"Aj_KFK]E%?$X`%D\M+46KI+s&s03H+f#;J;c7NBK.dV5l+3%'YsRDOfI>MVJNuX06)]I*&5_)U[i>s_OGJUYCKNhW(.,*b6$(:mBlPsNO\HeK(88m'%#,<'"`G>1`HYu)f7n^m2-dQi+NR;/(RZh'pDTlp!]FeZmE25GLq>a+iHjGO@40B&:[%d5$A;FWHiIPPIDC^=L9RQo&qBL6m$qC:a%ZI'Bs6Q?^-m]c;Fa]YmT/KL^_$tu5]6?q3\JNVnlLmqYT/6KEh=FN'qAAA?E)""X57Mrr<MhMOIpt"C-8":(cJd,)rq773VLkWHm%h;r'<5%1W[S1j5(!O-+aM$#(D]jjX#XO^&NM*'0oC.N>3iNSe!Qf3*HJQ.3D.KQ:l@@SGtf#(BOT7nI:UGK2?>'ae\K^[D4E$St0%A4t![%R=ioogd3pV8!l#*:WT:Bcti04c;T3q)FJtRBZHb'2"6;D$R@Zi-QU+GBEu+406\9oF@BX1^[-p,_8;?fJ;;o_eKG9\-TIa%p5(Uh(CCKm,('IY(h.nKS.[qa#(4D;Yg@b#Mhgc:")VV%iX(b#kqhd[H!t]s*tEJV9"spI_93Sgn.rTgc&NH4Lu!+![V]SlAHmd,%%:t'Qp#?A1i]t2Vcm5&)#h*9nQo"flOnh"h"dT3p98Bq1mH>k;9iJ>`11)Wtr3hj;aPC-7$mEjWiK-Y3V2L!ERgBTD%-AJ(d6EX$%YiMJM+QFU&&-A7/<\,[ON/?.1QD`s!2?Q[n=q5Alcj:_3Ld$L=&'$IL).OL,K-ubp6nQN6,e-M*(;foeCbUHKJ_Z?DL2ZmM=YGJq%jh!"`%TUL/YV+^`e<44O?J+TZ`J4M4#`,tj8FEIIS>[`olFODN(HENaD'AQ^F9M;9_.+T!@>uB8j?&+Sksd?:C'8r?EXI7\7Y1#R%1-cVbL:1%4)8"Lj.g!a4*0HOD?;.ku&cIYsU%3aG*kPB=!FujbOh2Ef3"CuE^86`?%2Od[Ge,)C8i&$pQLfMAmmI&+dgS@8DFi_*%6(i-7Oq])W.ki`M'=Aq1E<6=dW6:;\''@+W4C*f&QQll-\B;W;$'T(K)@YjP!oatm?WJUijXeT;HDH*hdLt6[*^bGd.6=p+C[X6V%=="GjKB3G9nPt0s^m>u?A^$$7!86OG=i3#ei*CoC#*p_/*LLCC%``4W[h)U5!kE6`8lC3VJpj?pW=Eg]&DmPqUHt:f%4'G8#F!(,%l!t0CokXm\_,RQ/3ikRXQl>%Sf?$AA62VLGhGW\PiV5Yq"DAAYM8kCFXiFb:Lh-QbacuLe6Nr2jh=#*ZOId9(q9k5p)500;`iMF/%irOP$6lBsU_uCc$TT/S+<^2_Wk6e3\al&?a>]Y#2Oa%hZKNJQL"&d0%_pfgfORQNY;qT?b8a=an=IEt]fIW%RFr<2"(;Smjl"N4)%'*=7I$#b.;NYtIuJP'dZaBJcTA-<qC3D12abbHo]#[%li`t/=GG!p9%[L.)/pe,'Q&;J[iK^=\W!COF"@qriUU^a!5CaD/0bnL&<%/MG)8jg`as2`OVU6KB=EnS<&sZbcPJf%;2Q>f)Y^7Bhle_TD/L\0Vna3ip[N1gi\^87S%$UE$M!,Rtm#7otmI*$r"/r?Z4-'UgcX%*0UMX7jOq\0U2flclj@qUeJl2O??t/*O72#>D$0:"tMDF]g\`0>OjApKI$VRQ3u4VqT2RJ0>fOWCeM[4O?g60LaIbYB_eL3N6S@>%((h<!VPbA"LmsT+VEkd5N*qc!YrV5aM&]VKS)@Xt2(K,<B6$IXBN<$5fW'g;YuRX:>ijEWjhq1d&$7=#+))P3<Y\(=R#!!*<g<lI%X=EHD@>p6uW-H:e@(K>AG3Q;;Loi-86D?aO@j/qk2Dei!87^r&Yg=AI>>c58gg+Gj0m=D;'Vfln2R,fFe!^RdH=mg@)H,3a4RD_$%R]S'"\;/jp[JpJ`$.TY$_]4H\%"+k3Guch^=I@:*3"6#b1co$+5j(cABE'eX,LsdFJp[SpjW;?YdHoO:9J)CPLu<\@/@'\?Qd]m4%iPS-*!ho/n'Q8Q;!)#qd)oD/&7M;*]OCU^j"7Lh[\_9\?@BQAqVNPdb&7TNf)Xu)uR'ncGoEKJR[:5N/s0,b*MYVLQfjgu-WAtcb%4^T[*'3LQZ<V`G<E1c)ELG4/@@lpi=G;Je*LnLS+%DG#@$lB!A_6uc`mMr1sbV)>1Q3/"pgD-3E)Cup367OO?1LZDsl.D\1'H20*%pgg<3Z'FIe=,i/PR:jE\3s%thX/[LT)G)EcKeuL&;NPo/N<A,eW?;McWbIlWcR?[fKHM8q.bc4tb>G6PoReqQ2$aM+O3on@OhU#e%"5tgu63e-+8:c<m":.I`bqrju?1T`Z,T1(TVTf,o"H7jBoKrh`&<ZW*WMhdSM*\-Ea1440#:[tUAZ3aB%#M>h^f4o],h3p`0-qot%3\F<EUiSiV`Y]J0RHZ+m1(tFA,>DG<Nhc7YQ/p:?"QHZ,<8iL-9j;b%a!?p-V;lE(TOnE)HLUKUPi99`3N<h3>_PHRde#r#Bfo,j%bLgfV]nd@Mi^/CnQHRB?Q5fqmMkr]Z,aQ$30+ie&T+*PG%&MF9,(`oBbTl#)+k.H/OuY`\H7KnXB_F@1/kWeH?mu@qs-(T<n[q5V%%J.gh1dp2mO1LU<WB%omC^tO,XNs?7"t(FE0I2O[#_?(!+S.Sp:i?@iGE?g=5V>B>6o8m>TsF!'`Bus:G*&6]=dm)M*d)-H2:!j%%o*-,Ba7u@\lpCr5*gR1H:X",p=L]tE/2ZEn_E^l@MNf0F5K*Mj5hE$_V[UA\g6)YuZmll^a%ACs2-Bc.*/2J'LjLF[?j+1ZhMNKG%qUt3`N+(F&"aG_5AAd@#Z"<J8WnSf;-/FF38*[c@@Ttg04f!877pfuL8A+J?i&N"?&;MkPB#BhhB$]Rj%Aa$F']Zuo\JeR'W9;7B%-9J-OV.hpjA:4`GaZ1=oMr,^h0Th62F.PR8!tE+E@`HP-7R(-Qi.7oSl4dk^]*RX/QF.'Oh?'+7*P[=#'i&BO3/`Y!c&&kP!&LAb%iU"YTSHu3B?Y0D\&>E]1AA?\l04q%5ij,GHJu-l,RJh+D&^#`f4iu@]ZnDq5"?9ufE4LaRX2KV-8kf<S,TF'4nnJ^c0WcJ.@("UZ%PF-gs;59k<%&>4CJ1'?jO"3)pk]fB%gX9J_19T_h)JVeX,91EPH!]K7e2@%f1PhkW5.12b6?Gupf:.u.j@JQup6(*IT<W;DCclSu%!la&n<uk&S&*D+ogQ<45a@3Ah!.:bXA">3>SjIPU=$sPNEd8W,g*L/3+OKmCV%M9./NDO4#/c6Q,@Xa_NE\Z(^oY9MGWE8:#-`W^%Kf7CJ\usB=h'1oh#Zmf_S=O15:F(Z$=OCrqf%:Am#_ollj-g8r4)o7qo<A?<Jr)lC*[m-eiH,OnbL!XO)q(JN()nUu'dk()?m1.,%8dO[l2LgJ.N.\Q5aa%Vp;oEb)5C;:'`.c$En/7>oQp]+a\Ip0A_=:s;%gXM8O@c4;M\JN4Cl]6>!-86U+S:s9!:.H@Ctn-=3+CLP%Gn<.sA@E_cO*cOt6sE7ld6_iR_k'_gC"N]9SlkGN&g#F</Ja=4V&2KO_gJt_$XA>5</>.&6Rf+8;Dr3m2&eTJVb@iXc.!O"=9B;7%UM8)X,0/&2m"MeEU1lD.!UXCN1d9BT?7=+Cab%%.^5:r,oPjX:@3"O`A2T#UeV.l%X%YS4/2S*_&8?T64^cNh30YRtc;_`L<*T^^%PsT?uqZkcb8$EZ%1hEANFDh`]f#Y!>JB)gqVp0cWR+ujEmKQUZ1ou'pk.B.d38kiISH]^*YeWM>W"crhbK,6JOV<\3*=lY%A7%+_%^hQo;Q%qt"lqi\*]_ELK>,^&sB4P<i;ArrWeV$b2Y6Qcb`(%tuoE1qKF+>;c=c4"HN'QeM`"s<d512<(VVm]##b]QsRn<mS4;\hO%/CJ)#":=uEdUInT2$>fsBnCkTej#<2Lu9-NK*NPP%gti"L<g(&K[`OCEnN)N[uKKW%ofA,oJOs\KOo/6^=;*C,`uU*AEbmr_R<ne%>Zp73e+G^e/)D,AO_=fdd^)(SMDLBjp`It?cTtilj%odFYmK<nK=jOP*-.`M'lH)U1a1PM;!"I65Ck-DCToPQ+N'+n[jI>h!DSdW%AZ>nD9NHA"\ePA']$"562HYb8_*m^'="9IE?='6;+:'7'/iF0>kCC\'1f6?U=MWRLPYP?T.^2@1NS=[b9B2*p^I,RdXdk@h%j=;u%Uo/b]EUe<FQ\Q<o^UXaU+OI45Si#\L&;3r0W(->Pq1_Is_0t&N)a'pb3dpM2pl;./pA#b2%)b2;Bo^I"`APqi`d0)L+YT0iT8eDj%D(qY?[lfDu67gaHquPL[,#fP5!8fVpS'PQ:RDCT<mGX!X$WEmuK0a>sX^/4g;UGm_!MMaAXTTe_*L`.-RLpFL_N&Q,*ThNP;u_Wp%9Z\XY!m.jeo;+<^)XJBi@&a?269J7nKW:$q*JVq\@]<(%JdjVgB?3ni"'NQ[&5%"1W8T$diZ(fgeh,6tH[*R<3(?19&q#Lhr$WIl%UZ.tL!mUhn&c<eW0'R>s*nPTm:TG)!;Ls-WNg<!TJ>\YZ$tfQ];u5?@OfRDT5gIlW3N0#q:HsO5=j`Q-4<]mO_QCh'dbrbT%3'>s%A_>R(#Xmfm)`!TcEF`[j66K,3<N<bVrGseA)>6MC?D%k36/BAO&.#0Y0j5]"S$8+MLu74P-3Usr8.su#2/uiJB-JCSH<M3g4'qEB%m;OMRO<-'NJbpLT;1Q5<,7ECKXuAu)R@\,^&?Bc[e4>\[gP:H&2I'e_Oi-4DDfKTZX3cRbE_RoR1jihh#j0LB4O\la+rDWhf;['t%?91d&PGLDj!5ZOoA8uE%e1D(A8VCjAfgUbS4ESb$C1M["E\)GH61bW4<Kgq;%rIFuN5\3M&kkd4<p*/L,urjA;*U#f8(*t[W2C4M%c/'_*&(l^p,uE>:2ZuX8XQIEE#/&Y0+GCIGHQ]g`6-,cX:?gqTSH8f-I$m&6]b@rb8@RW`+0_06KWqthUaRCZR9?i(KhWCl1SLYi%hcVS`'Vq].oRTV=2j!4DE/Xk[?-%&q(o(7!F)n]4$W]6AHAKmp+-ar[3Q*Q*YW<(#.(5iZPo:I;-jUeJWcjas!(:P>pC5$,!1"(s%:rb6m.THU`-#L:D$\2>5ac'/DmY'N"GtTmm*\Z<\0O[PYGcG`:,\r!i>BmfHbT1ejhim:*ThJS3U_B0e+;V+rEM<;_\KT.b/!MTF%[dtJ5=*ansBc$lPD_p>!H)_<58s.jQGk`[2Q]<p?QRM+jeNjIC#%XS5^g[@o5t_IP1:WpX^I+1&^f$jm'Fo/M.u3n<V8$H!2Rj"9%FuU#jQP?G3P%;34b^9EK6o4guWL='._f=_XPcq#J(i+s1:Tu"FYDO#rmfA5g(_Iqs;Lei^!ODN8LJ5,R!H/RG12h[hlf)l*!ZtZ4%!(M&5'Y&NJ"C.]+K\[IW#\i`/Cm:cIa`SF$+$9N5-L4=8pm-h>4dd>pB'M1<&_`qA&%+fcOIVrD::XKE[67Yj`kG^!*tg5ilB"*o%Gr#=.*6g6a:>D%0W/4J="R6%@e.aG@ph1dCOq$$P:e-,VR)Smh>d+k!^W>PGJjLY$Zr,=;ZE(`;+V89a!b<.ROG#H/_.&"Y))4_;%PNP&rJ^5EH4cln'AIY#c!^sJ:9EGG>;/$`cP@bdkb4Ni1;#i<U,H>CWOoYdeD*Yd#^7#G3%$"/0Qk)HP"G/[2Se)HklSj5+B%hX6%MHi'B.-#nIGZl,b#FgbTn5M,uO;041UXFLVLhohGZ6_gla^@%If_735kk0bA!PmfK9WX8u__S&BN7\75aB<O`Q'pa<8'$h&D$UDB%Y+YkK]BWK8S!2;)G0&huAD`t1ESEElD?_jQ+<[oN0%[XS4u=FDTuu,,*+T(,5bUB_%U$q&oU"4V_e6@Y$8AoL-L<]3SjA/L2,76g%#BgbM`Y(F<'SN?#rgT0c=\])O$I*V-/Vk9\$1B!f#T9NAQ0OAS,p773#FXHLESYHd#hh5qYsc7EiXKs7l$5[=gls0H5j37L*5q3d%3m_Pe&:nd@`><qA>Ru56#S^e3DnqbCGZ^fJbQ*8'Z!:90&n2MEfher0bm"]DB5^?%P/g6=+be6),DZLH7KAc8S?%#nYen4S)'M-Q%$[CW`^f2JO^h?g`7*6BH3as:L;?QMnO(9TsUGdc]!J.`$nIPD^+^97;]s'+&(!%H.YMsb"a^B'7(G"L<*0dN.au+s^jLc)Q)[o(\%ouQeOr!uaBTuH.@c<R,G\0T=^?4QrAV`P`9[ftdZ-t-Xf&eK`l%hrTsOW6?%jC^Z<7PG-n-J&HrqSA<70!SIbg9Y3):5Ik;h'3^[%HSRbjL]c6J*si)Y)A'_uO!(F<k:**A74X[%-?6m<%\,e(1nT(=E8ZOKkAp))BDBc7Th.F@#$_t.$fm.QY#MQ#U!K56L;(mY5Z&a5%Pu*<ql!i=^5+M[['Y-]S[mgZTP(8\eeDU#o!j5g00FZBQ\9eB>Att"2J:*:RJq1)-LXu9SM?!?&RubOo_6TnK_J,-_0Wt[KP#GKK%.bDf%UgH:f!I?JjL5m^`ME+Ul=58B7`Ym6G2q`h9h*dqXoH%\'d].rK&-5U03V#]R)j3Y^W<,rSQTU8n(LY^rYlZ!h1557UMrG2c%'15:of7mrIR)Q@iK^L<I)+Tf?+K!7s(tGE5<reF@8N__B'L53W&b4P&CdQ5GHJk34j`c8:eHe2AisKC2ZPk<(eoFa!$]$5h8CA4S%hj6"$Q3e'K>?!)m4tos$23K!D".uV6D3\U)bb"mB6P^bT_?q0f0[="uD7Q50;';DsHtXbtMaBg,HU[l_bm8eTU%uDB=9JMh37eQg%)],94M<>"6X/>h<!3-9+U#89^W#%Nped^l;7_6$FW[#+u/EmiAec<M5-2Im//i=HDS%^@LNHF,h%,U#SL-ds&,NA=-^n?2XLD<#4%^m/LRV^;+uP(Wjj9t!Gl-jtQD0nY3n_mJMem'A$hiN_*l8mfCVO_Q*Xi6&>U+0N1?^;G^eTN6c1bjc1#fP0Gp+i!PTa73@0S/73(%Cq41*kGuB%!.9P;B"@Ip+>OG"87>pdPn5h4Y]R,+XtA!!605;LNm=u,bF=55A7[p%)T2%G5b6`P/m<K'Hqte!Uo50q2kDHm;a+<@%OiEM2Sa_bKnMk>f]ukKINp"Ld;FDXCXY!:]'W,C\&9[@."!`?Ad&=0Y*"K@&:h25IV:j,sTXjl73!V4U_2%.A8"`?!a6/9J)1oq$%U'3pOSB#p98:b6@+;E)aRkpJ*lZ2,F#/c0,3(Y6@14e?sc9eP=3OE5$.D[bSULQ(sIQoGd"tPDt+VeNOeA7EIM[Oq,jS9o>1(6/E%&4h=*%:q;`kSit"+)7CL12@<ZF'C&'DR,N>)hT0N,1KQeL,^YN+rDCD"<;UsR.fW-TZel/a_h#U7;<i=<fmI%C[Ti\quL[(i<%Bj%i-U-;cW(->R#qP5W'0)"'ZX&:KJW81'Id#X4_]p#-S;DS6(JD?O;8t'3d-Sineb6f2<nEjUh'd'KBKfV'UA0]Pa9I/,0]"EA727V%P>qXhYq0-pl,f!>.=!^f'?5dB->P?aNeEc*_Sb0%HpeX"=b/=r%Kit>lq/a@<"SZk!dSl/-he:i2]\_uin-,DcVq5_f?bc<,<4$f%Jgcp*/ddE$\hTILNg*$.[1+oI;=Gqh'35@C?`#kTf2\W%g`IL;+jVe$$pUP9YZQN0#%e4U*2a'E>k]YqB9\cLd=U:D?>/\a/'.1T%Oh&W\i`SkmK8bJY#8$$=NZ0$-X%n%mRVo>G&]Kj7qT)2#.>ip`WI\#;=q^n'+8@=M50oNb!&BF(jVo=%]5U^m0.Y`V)Sg@Rn^tY+%6dq&%)-sSOc0D8[$^t2*51V.'OL81eN`k=pmLDQEKUU5dj&cLrs2,I7-5-oEh+_T=AEPV%fu.pb!H6j_"g1><Q%g)&O[6,pb6b`i%-fG5p9J1i&b$d2+##J5/1.!TW\0fFD?l0MXORpTem]<.?nDkKPi:&?u<)3iCU0MuP%BI_"(U-JeZWg\/JD:c)]u'b/)MsMr*j+og%N8mM1f:=F]'qcVDK/frS6/9pZs&J!G7OX$tn=VT@*H4mt=54ZUA_ZaOO5?2:0>q\CMYS3Tn,VkiFH$DpA:2:3CKg9JbM\na^f<nI%+a1dnJ1D.OLt3=QRgj2gQcF>9;^Te%K980o!(=WUMHU=Ri>bBMB$8+Nc,<hc^&/Db(VJ+VSfCem*al)So$#$;=ot?KRh&nYp-VdS%YJTDb/A2HpV#g:'qXV:'c8(&?K-R6%&=,/^M/YTa6<Y'c=I(>l@ET0&/CTjh!a3t9%0)7Tj=,MC0E!uNh39>I"+iWQ#7&&/LC>DY%4E.,QQVYbXIuTM<JScS?E3;Jlc[=d_)sM`r#>Z;8&ku#Oou]B9IC+`TC-u*4XD_kBrUnLsn%R2g`J*XDO,)PhpIi0"SW;PH:u[]O%9+NBN_F67h5f`M.g2@\r;;Z%aTc.Y6SD4^1NY"(VL#p>%V(bh<s,97H)onqPFIk1N'a(2G&E:MYI(N8N#XN6/'G1P:daMsLR4u_?%oTX]T,I%b!b@Oa2Ch_195n'.0r7GWarT8Uo/a,^oSq8E/-\Jc-;EPq5&4&<AjIc4I1p:3$L'"*iUo/I#[ZG`2j"luQBf>J^LO]Y3%\pk\`-+q6qg0qZ7<BJ3g2`PkLeeD:#,/X_+V)[`jWM;gHj5^2u,?YL<%llkHZTU]a1'A1&I"qJC+^a4r@M)Ks3"cF.(-!5\7V(I&%>Xm/bLhJ[ga3KQmmg#A$@[O;\Mj<m!rg+9n*7pI`Z"tdq$Y@kh/T$%<AEo%[#t-EiJZFMb)kW7I6o@B>C;O%Bk/-\NH:JDLh7BUO%Pfp6AiTB/I!&:-lr$TDF/kf*3=O)96@4kbfL$[6\JI8$1AjQ"h2[)PdWGh.l8!Jk!63r<KYcir(0i6V*LW+?5nUF4EK&$T$K>GHo%#X^#3cXn%MhGBBq92WcESMcoNbi``YV$hjsh(_i]Lc/BT7g]MDEFZ8fKWI*GBsOT]5SAoADIG+E_uQjs+B(cW<O$5Q%o*dh&\t<!%RnU?#XQX%n&,\EsShfPodU,8Qi&al/p&mM@N$CoH:kNU%r[^Q"#S)EGrqJI])U)>@!!k9/-HtX5n;&XhWn3=bC&(X4EWpOo>)U?p%.nbcF)BUA;aqI!,9X)D*cBVJ7L5;(486O:,,iY+\,dLrR*YQsncU!/rl7P=7B>C34q$r1e!d:ljdo&2JJNO)Z%n+D<W`TOsYN1%N%+^I(RiOE?rCs2SjnTgsCg<)SEn65@q"MTgIic!*Z\ZQ32H,XU]^di9,fBC,@J@>TVRXFo2+U7+9OB@9/nYHIjWj]!K9')H#VHj/"%ZtDj.dToE:L'6ZPDn(lO;B4pW[ZSPi.[K(eFMe5;`IUPGF[]aIb5JQ(1:@Y"+%ch+:`rmJl5C+gIo-%PTfhAf&&^ST4)eF7%Bfue%cCC$Q:6OL].L_*mj5?B)i@5"kgqa[Y9lA!jUk]7:F1r'u/,'5!&<f9XFV]Na3,$sB=9G;',_OQ5jl<nU\cW7[jF%n'du\=@F96Cg%P4B!$+J"`;0FngG_jl?eb5ap>8P[oOaDm5-,6L>>#Jl2\!G`9h5rJ`X!X!=t>+en&.Kd"=YS/q$jVatd.DZSM;g1^`;F9o)7Y^i(%e!FitcFtH;_B$aX9m$G"#O6:K3`r)WF#Dn!F_kZWJL]*$]+R[?b[NQ^O"^$rQ2+c^j--A\+jh>>'A1Hf6shqfrg0tTOKAOr)D`(T%,t!6Ws5H7<,]o<r)'I;DZIRq2*$"2XLJ2kN/VPco09iTOK<T;[AJ!t#N#a@f.gp`LBHT5/7/9<,'!RWl]]%@BjPrMVq8c$POP`Sp%lGu=d!TD6Ua>LNgGXhr<r6UmEj['S^+O;LR6oaB5d0`gEB?"R4,H[Cd_jZQEL6@rE;8GmXqb5\SpVRt;abJb$JS,"sH0XAk%UT7P%CWrIi\>:*+4V$f29!grQOf+R-nj])1"_ctsT^6_Il78]^f%=RiQ'Dd3I:/ltEb'.;'XSB'[pU!TkkRHo,3/n0]`"/?KJ`Ig9mBUp%_SULHT'(gh*LuQ?kF^M#`#mPofRRIuKIp,i--Jdj,?rikN9L]flf95l<g)N:N\nnI-Zbij8h_T.iW`ueoW:Q-T@3;j%GuJ2X&Z1M%S]fp"qlc?9rnY:hI_T1fGM@?;pk[77TBSr)n(6='pSZWt^:1_PrrId:$"'l:QbT\&rZ?6C0%0~>%AI9_PrivateDataEndII*ÿøÿ¨ÿÿÖÖÖÖÖÖf)¹mMM%\%\%\%\%\%\lÏ·ÖÖÖG¹m¹m¤MMM©ÅÖÖÖÖÖÖÖÖÖÖÖÖ}ì}ìêì`Ý`Ý`Ý`Ý`Ý`Ý
c<w	·····MM?¹m¹m¹m¹m¹m¹m·Ý0ÖÖÖÖÖÖ`Ý`ÝoÚÙ;%\%\;ÒÖÖÖÖÖÖÖÖÖÖÖÖääääää`Ý`Ý`Ý`Ý`Ý`ÝÖÖ%\%\%\%\%\%\ÖÖÖÖÖÖ¹m¹m¹m¹m¹m¹mÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖ]:M<ÖÖÖÖÖÖ,wÖÖÖÖÖÖ­pÌéòuÖÖÖÖÖÖÖÖÖÖÖÖ}ì}ìk°±QÖÖÖÖÖÖaÖÖÖÖÖÖMMyMM%\%\%\%\%\%\%\%\<}ì}ìMMn¾Ö|Ö|¡á}ì}ìMMCX~b¹m¹mÖÖÖÖÖÖÇ4©¹m¹mßÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖÖ`Ý`Ý`Ý`Ý`Ý`Ý